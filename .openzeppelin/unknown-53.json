{
  "manifestVersion": "3.2",
  "admin": {
    "address": "0x3F715995647fe44Db45411bb9e81b7A1aD5A8387",
    "txHash": "0x399c3ee051c3a20e8e5c3dbd31de1d83f6530351312f619a17af1e8e55d196c5"
  },
  "proxies": [
    {
      "address": "0x788A0cBDd8bbC5616998DaFF1cC836e253b6f04F",
      "txHash": "0x9089c9a69094dedbba3776553cef02828a28a1736e5c506c6e56e1c611e365fd",
      "kind": "transparent"
    },
    {
      "address": "0xDCd800389F9f696261E6bcde228AE137550E5425",
      "txHash": "0xca2b517c8b6ec8465a8b979b194453e86f45dde4491c30914399cdf212bc9e84",
      "kind": "transparent"
    },
    {
      "address": "0x929059Fef67b88CE2F4127e59B50bEA123981998",
      "txHash": "0xb856f6bbd034b952638c78ed0e8a42be2da4bd58302361ca23937cf445c6bc47",
      "kind": "transparent"
    },
    {
      "address": "0xD9C5449EfB3f99952F73e824688724aAFB81dE6E",
      "txHash": "0x2c6c80ec90935cf1662d3c4995f9a80356617dced1644ad0573b35ed0e21ce69",
      "kind": "transparent"
    },
    {
      "address": "0x9747aB999a6F8FAa80AaE006e4C145047A073a87",
      "txHash": "0x050d9772ce098cb52a6fa623f13760ab3bd4f77424b4690e6040122b3f5c2e85",
      "kind": "transparent"
    },
    {
      "address": "0x44fD3155849A1B1714a4FeB906aEb6e34960CB40",
      "txHash": "0xc58ef39d652cf82b79a8f69cb7faabc381debf7dd805cf7bc8002dc894917708",
      "kind": "transparent"
    },
    {
      "address": "0x0a7f0B335c08a9b0a847be0Bb3F847b6FEBA6269",
      "txHash": "0xd532559b00412dbc05db1b5bb84816d1195eea05ed68a27dfad186a29d1dffde",
      "kind": "transparent"
    },
    {
      "address": "0xAF4a3c019dbA8726C6A1d59BFF8E966915CE08A4",
      "txHash": "0x6dbd03ec6872f35019bc53919e7627bcc5e3d6208dc07eabcb66c1cc8c1230da",
      "kind": "transparent"
    },
    {
      "address": "0x81830539D1E598047E699851d31D21DC9f824fCB",
      "txHash": "0x1fee4f9b7fd035df89cbf5580d327cd830976bff93ffc6be258fa63b1e3a420f",
      "kind": "transparent"
    },
    {
      "address": "0x4C22CE66AC63Ee27Fe1e69c45E0dD6C7126a27c0",
      "txHash": "0x978ec3910be9b77a0846b0977912812ee68c8a9902026fc6d3d28e1755fd11e3",
      "kind": "transparent"
    },
    {
      "address": "0xe85D1aE657F829aBE227a491369612bfB9948B5e",
      "txHash": "0x15d85b0d01b2ab73a7bb2b7acb48e6aa5e719e7ec395d3d1c8627bf0f781a75c",
      "kind": "transparent"
    },
    {
      "address": "0x85F9335Aa1ce312D0eB24622B60289F3f4Ce53bE",
      "txHash": "0x042f97d3c4b7c684b1f7a980e10a8cb49345947c6315cf12c37afe899a5c15ef",
      "kind": "transparent"
    },
    {
      "address": "0x1F3Ce1418c026b2C85bCa9dBC34a370367f9ddE8",
      "txHash": "0x3574b8edd79ef1431cc401b3cf3dd34be0901032a8cde5c2c390d99f606e7b9d",
      "kind": "transparent"
    },
    {
      "address": "0xd54E98e6B8661Eff807619507aaa67d469DCC7d3",
      "txHash": "0x8aa629b3724cbfbda6fb628c63d736145aabeca4f4d76e105b7196d3f2efa245",
      "kind": "transparent"
    },
    {
      "address": "0x989962bd25AF16a4d4abBB3C2aA2721d8e487D46",
      "txHash": "0x0c6239b217f26edfa43c00ec663b8ee8445609efa251c94d6bd47d27471dff2c",
      "kind": "transparent"
    },
    {
      "address": "0xEc9d6815931872C799682239ACeA0AE072d92C8f",
      "txHash": "0x9225be5a1dd935343985c43f151c22343b114a1585d3a12216f871197d21f31d",
      "kind": "transparent"
    },
    {
      "address": "0x536c308e7a631Df245Bc0266b7A08190eDbF854a",
      "txHash": "0x27f6b2bbd8e5b1bf9e756d6c61e0a1d510444fec803ac43d60292efa7faad4e3",
      "kind": "transparent"
    },
    {
      "address": "0xcAdcb8f67469C96C78e38Fd9C44b064077e75765",
      "txHash": "0xc817128a5078dd300059287cedf5b17d7aa8589f45679bb6847f7faf38bbee88",
      "kind": "transparent"
    },
    {
      "address": "0xe414e948866103616F5A7a1148844329d48a8393",
      "txHash": "0x67a568df402f99b9a7768883646d6cc4ca9e0a365c22f902d68ead7060b19378",
      "kind": "transparent"
    },
    {
      "address": "0x739ec09B988FFCe5BAdB7A94085e9E8AD76637e0",
      "txHash": "0x99b5cc1c7e708e56bf899833292221fd5650fd520b3623593a7416737b9fccf5",
      "kind": "transparent"
    },
    {
      "address": "0x51F448690547c27965BE8C6BF9c0AbC30c929D0b",
      "txHash": "0x991bfb323aa3e4c2b362fd4fb8d1ab56808bad0168c163feb4a8f5618eb63994",
      "kind": "transparent"
    },
    {
      "address": "0x7293e1f3179c1c523f61659D3375670a3Db6d9C4",
      "txHash": "0x9bb24582fccaf5b448f88d1c93fe06a96a43ff13639435422032c400bdd1c837",
      "kind": "transparent"
    },
    {
      "address": "0x44a91d915aAEB7d99103E7090D73a43e5691Ba7F",
      "txHash": "0x607b25b4fb8aedc2f7c5ef01d79d444296142765324c2d3844dcd4fdf2f38325",
      "kind": "transparent"
    },
    {
      "address": "0x3a8CC35695a691F7E36E87F42C81EDC78E413AE3",
      "txHash": "0x72a21509e83247548c72be94b46d7b71fb8c5f0585f98210c1e0c3436390263e",
      "kind": "transparent"
    },
    {
      "address": "0xbbCA928DddEDE7615f45823Cf30c7F05063ef1Cb",
      "txHash": "0x0462c07e8a953ab617e40e247affde74286ea54b87f73d19c3bc42319fe71a8f",
      "kind": "transparent"
    },
    {
      "address": "0x416c0B5188c4CE207724260ef803ac6b777D6735",
      "txHash": "0x9979369a288cd369932a1483b3e61fd0b1124a090a2f34faf1e917a363988c18",
      "kind": "transparent"
    },
    {
      "address": "0x4D3c100845e1C919dC69ADC311c16C299C9b8EB6",
      "txHash": "0x1bac8817d40c7ed6171adc440b0a4d1fda32daa8d5062637615ce208b67b7c3c",
      "kind": "transparent"
    },
    {
      "address": "0xa1023fBdB20EaEa4E0e76cEa7D53f939d7AFC1E5",
      "txHash": "0x312a05bc61d4442de838d48fb904eaacbaa1c9f3ef14355ba9e9a60fc91bdcab",
      "kind": "transparent"
    },
    {
      "address": "0xb39C77f15A64EED2CE80aa1401b41Ac8cca42145",
      "txHash": "0x2c6a438ea5905ea5b75fafc301607bc70a3685d32393350bbf2031e4094f8f55",
      "kind": "transparent"
    },
    {
      "address": "0x93487d7902C560d6ae3e4191D9E6269bCdfD307a",
      "txHash": "0xfb4bbef9dff2272c0f4886dfb75cc5293730a1a9eab55ec0c9358d1b20988b89",
      "kind": "transparent"
    },
    {
      "address": "0x08d7fa25A8e19dEAcFd0e720e6380cE577015B63",
      "txHash": "0x89af659322e8e122c9bd3c3d7ddb3fad90c35e47ed75b85e43a597d0a8533b77",
      "kind": "transparent"
    },
    {
      "address": "0x885F4E98cd4328fF26bf3403e4D922C43A9A95A0",
      "txHash": "0x1888c951972a0f3a2669d310161464d0fa139b378920925e28cea62cf48bab82",
      "kind": "transparent"
    },
    {
      "address": "0x05d75C3Da32Ef4146EE01dfCE349dAb828023681",
      "txHash": "0x26cfc21a4be5b1b4f3d6e8d6aa3265cc9d445737638886806387c349e40b84cc",
      "kind": "transparent"
    },
    {
      "address": "0x59dd354428B308055A19EdaA501b4df29970B58B",
      "txHash": "0x0ac6601188c9c525b0d04144a00143099505c941f17ea01bacf296333075c1a4",
      "kind": "transparent"
    },
    {
      "address": "0x3d8ffBea4e74720b90D6E4BCAeD35f2dF3521Ee6",
      "txHash": "0x96ef8a5975c267e4db06144232c9807a45cdda230ea474e291dc7dda3a63616c",
      "kind": "transparent"
    },
    {
      "address": "0xA48eEa0AE12cb782BcB524CCB1eF02aB5f6a5a08",
      "txHash": "0xec33405e202f38f834c2f8f8c771bc6298d3a4ffa561964d76afa7f3c8c71d77",
      "kind": "transparent"
    },
    {
      "address": "0x63D229c34f1c50bfA6DA976063b9f413e60f8A1f",
      "txHash": "0xdfbd4d4257a71cd2e4ecdb55f33a677cf0246c6a8be9ac3aa13b775b7aece8c8",
      "kind": "transparent"
    },
    {
      "address": "0x2BA963ca7dE9D99eDf5644bE94fc90118d74d92A",
      "txHash": "0xeaf2389edebef5c3e2e98519857951934a555fa0079b8f391ca684b22787ff88",
      "kind": "transparent"
    },
    {
      "address": "0x76dC13A74E2BbC26Fb08289c9D68fC99fdb3a7D6",
      "txHash": "0xa9114ed478ec3de4f4df8c80f8b246e61e720fe2589a4316d16b64d705f6a36e",
      "kind": "transparent"
    },
    {
      "address": "0x1FC52B98fEdA54DD294D8cb27784b744625Afe8e",
      "txHash": "0x15bb3d2aff5aff18871bdc37acb118f150ea567df01cdc84f6959783a73de5f9",
      "kind": "transparent"
    },
    {
      "address": "0xeE119eB272995Db5a6075333Df535667F61287Db",
      "txHash": "0x3d4da71ca72cb6ba0106146363953d7d07080dc617eeb9f8c2ae8bb08b604c43",
      "kind": "transparent"
    },
    {
      "address": "0x29068F5f8b87F9E9661044FED6beC5c0D7548cEd",
      "txHash": "0x9957c7b0a9205df37737b4683e0527a1b538ce083ef8e1c8415d184b3ec92291",
      "kind": "transparent"
    },
    {
      "address": "0xB4a1661a19AA4Ef3DfCD0cE11f474952bd5Ca140",
      "txHash": "0x8ae4b42799cda3cfd101d071b6450134da3d0487af3366071be109c108331919",
      "kind": "transparent"
    },
    {
      "address": "0xD52e4004979DD3a44A7a6BB2F85A7b0c109e255a",
      "txHash": "0x64afacf40a081a9861c4ec78fca2e1b591a6024ea93c5e160cdff9655f47e34b",
      "kind": "transparent"
    },
    {
      "address": "0xD0a95f980967504C34f749FB76c8c17388B1076a",
      "txHash": "0x84ba8d86fff31571ee67fc6bd6d4576c4e6470942cdde323abf9c6907ed5fa2c",
      "kind": "transparent"
    },
    {
      "address": "0x0f1dC323DcC8FE8e67CFeE4d4726793B6428Ad39",
      "txHash": "0x88c1c42273428df2f8aeac12f535714fa3590c586a00310fcf2eeb63236ac77b",
      "kind": "transparent"
    },
    {
      "address": "0xF8C548cd18307647D54F5bE8cfe2a37232feD942",
      "txHash": "0x8651034fa6209c4849e4a9167e57fa6a6b13a7212069bbb7908be1be06f993ea",
      "kind": "transparent"
    },
    {
      "address": "0xaf7433ef77c9608dFe57BFD2ba60EFe6b64515E6",
      "txHash": "0x099646d84b4f11121ba86d4361e3a75850753fb22147fd1050b92eb2615ff2d8",
      "kind": "transparent"
    },
    {
      "address": "0xa23E6f57521f217729C760227c2b5b8b6AB1AAD7",
      "txHash": "0x5161ad86ea0cda80be6d22d6256ac9131926eb1ea3b194486f9ecbbf04cb4297",
      "kind": "transparent"
    },
    {
      "address": "0x1C2F927aE9BD5b8B8D1ad63820Acf3cA33023af9",
      "txHash": "0xb502604fb87d3df2e1e22ada35a1d86aa6a6ae2c6b63b174278e21c877da59a8",
      "kind": "transparent"
    },
    {
      "address": "0x5Bdb86848e51b7eFB52C316dB07a62fB47dB5Bb5",
      "txHash": "0xe803ef3f6d331e58d96d397e9b06a6da5a0e783d951de8ce4af7e5d074e865c9",
      "kind": "transparent"
    },
    {
      "address": "0x24de8D4859084cB8C260721d9962BbF224BF4C98",
      "txHash": "0xa2fbc1e68ef69cc14bcdcc2716ecd2e68ab9b66ebfb559e1d598b812b916d1ed",
      "kind": "transparent"
    },
    {
      "address": "0x84f3B66509809644446F66812247e73869358Be8",
      "txHash": "0x2aa760ddf20de67d408ad23639ec7a79fe59ec58dcb233cd03ac834c487429eb",
      "kind": "transparent"
    },
    {
      "address": "0x99EC865099A21A6350ff98ffc3bb9c84C8E54D18",
      "txHash": "0x969de09b4d770e70a68ecd413dc67ebe816bb81f4aff9bac297b63f1fa09f090",
      "kind": "transparent"
    },
    {
      "address": "0xBd0d476A7e18555A5096fAc5347f3C5EADF3EDFf",
      "txHash": "0x26ec0071864a1d2252aee0bac2638bc0e2614ff65dff622225997cc5774783b9",
      "kind": "transparent"
    },
    {
      "address": "0xb3c973b40cE1aFB93B77D4Cfe083a83B2aD1c1F6",
      "txHash": "0x59de0cc38bd19f98ad3b982fdc737668a5fc8fcb663659ed0cb0ada2f3d2bbce",
      "kind": "transparent"
    },
    {
      "address": "0xb416809961079B420e183066b537E8998814a35c",
      "txHash": "0x3b6795f2a731a2b2ddca46bcdc02fc32a7ade82d2eab1681cb9fa2604588b52b",
      "kind": "transparent"
    },
    {
      "address": "0xE6Abc36f99A0efD536321ffC710E6F03596B5113",
      "txHash": "0xf53c7796d3715b0da3c126cde1b3087f79f7518689ee1d303dd088740401259a",
      "kind": "transparent"
    },
    {
      "address": "0xEBbdf16D3183D1fd9dB8f0945D7B11bc195373aa",
      "txHash": "0x94e3e0990d004c53672e691feeb45a6785a5f91954d2b118fa17f8a2c51bdcdd",
      "kind": "transparent"
    },
    {
      "address": "0x0F8E44B8dA7C0c7193f633398Ec930eB1bCA0943",
      "txHash": "0x2c94283bd75e3c80af858bb5791cbf55659ac607b93580054bd3e272a88bfcb7",
      "kind": "transparent"
    },
    {
      "address": "0x619270308ECfEF9AD017f1E62736A0F6DA31eb3C",
      "txHash": "0x36387b95ff61e7bfe6c70ccce349f6212397dc796d04f96cd049b12f436c917d",
      "kind": "transparent"
    },
    {
      "address": "0xEc42f00F90e69a35A232D4CfDEB4488fD1E4A8A1",
      "txHash": "0x9b2a9fa56afcd8db853e5bae2831251a621bc2385e454ae74bebf3f47f067add",
      "kind": "transparent"
    },
    {
      "address": "0xe1154cB3Ba6E0a0735B6419A5a443b39127492f8",
      "txHash": "0x0762f89ee8d692a153a6a0b34f4738b882469100d8cf428bbb074f89895912b5",
      "kind": "transparent"
    },
    {
      "address": "0x46507DFb6bc24E18Db80C8BB1f50fFac3aE83914",
      "txHash": "0x0a840e0bce022ee646468d28f7f415a50285b4137b21ef38f22eee17080801be",
      "kind": "transparent"
    }
  ],
  "impls": {
    "7e96d22557b2232caa17cf36ed2dbf475c3f397a4f788e303759732a8e1d5ffb": {
      "address": "0xA0aDeC855D970CE6630947192E34Ed79412932F2",
      "txHash": "0xbf44e6440acfb8e8caf2d427508af24530b773438bfe8c7770379922e0ffabd2",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\proxy\\Initializable.sol:25"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\proxy\\Initializable.sol:30"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:20"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:74"
          },
          {
            "contract": "RewardsDistributionRecipientUpgradeable",
            "label": "rewardsDistribution",
            "type": "t_address",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\staking\\RewardsDistributionRecipientUpgradeable.sol:9"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\utils\\ReentrancyGuardUpgradeable.sol:37"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\utils\\ReentrancyGuardUpgradeable.sol:67"
          },
          {
            "contract": "FailsafeUpgradeable",
            "label": "failsafeModeActive",
            "type": "t_bool",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\staking\\FailsafeUpgradeable.sol:7"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "_paused",
            "type": "t_bool",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\utils\\PausableUpgradeable.sol:28"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\utils\\PausableUpgradeable.sol:96"
          },
          {
            "contract": "StakingRewardsUpgradeable",
            "label": "rewardsToken",
            "type": "t_contract(IERC20)65007",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\staking\\StakingRewardsUpgradeable.sol:31"
          },
          {
            "contract": "StakingRewardsUpgradeable",
            "label": "stakingToken",
            "type": "t_contract(IERC20)65007",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\staking\\StakingRewardsUpgradeable.sol:32"
          },
          {
            "contract": "StakingRewardsUpgradeable",
            "label": "periodFinish",
            "type": "t_uint256",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\staking\\StakingRewardsUpgradeable.sol:33"
          },
          {
            "contract": "StakingRewardsUpgradeable",
            "label": "rewardRate",
            "type": "t_uint256",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\staking\\StakingRewardsUpgradeable.sol:34"
          },
          {
            "contract": "StakingRewardsUpgradeable",
            "label": "rewardsDuration",
            "type": "t_uint256",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\staking\\StakingRewardsUpgradeable.sol:35"
          },
          {
            "contract": "StakingRewardsUpgradeable",
            "label": "minimumStakeTime",
            "type": "t_uint256",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\staking\\StakingRewardsUpgradeable.sol:36"
          },
          {
            "contract": "StakingRewardsUpgradeable",
            "label": "lastUpdateTime",
            "type": "t_uint256",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\staking\\StakingRewardsUpgradeable.sol:37"
          },
          {
            "contract": "StakingRewardsUpgradeable",
            "label": "rewardPerTokenStored",
            "type": "t_uint256",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\staking\\StakingRewardsUpgradeable.sol:38"
          },
          {
            "contract": "StakingRewardsUpgradeable",
            "label": "userRewardPerTokenPaid",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\staking\\StakingRewardsUpgradeable.sol:40"
          },
          {
            "contract": "StakingRewardsUpgradeable",
            "label": "rewards",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\staking\\StakingRewardsUpgradeable.sol:41"
          },
          {
            "contract": "StakingRewardsUpgradeable",
            "label": "_totalSupply",
            "type": "t_uint256",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\staking\\StakingRewardsUpgradeable.sol:43"
          },
          {
            "contract": "StakingRewardsUpgradeable",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\staking\\StakingRewardsUpgradeable.sol:44"
          },
          {
            "contract": "StakingRewardsUpgradeable",
            "label": "_stakeTimestamp",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\staking\\StakingRewardsUpgradeable.sol:45"
          },
          {
            "contract": "StakingRewardsUpgradeable",
            "label": "__game",
            "type": "t_contract(CryptoBlades)44564",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\staking\\StakingRewardsUpgradeable.sol:48"
          },
          {
            "contract": "StakingRewardsUpgradeable",
            "label": "minimumStakeAmount",
            "type": "t_uint256",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\staking\\StakingRewardsUpgradeable.sol:50"
          },
          {
            "contract": "SkillStakingRewardsUpgradeable",
            "label": "specialWeaponsManager",
            "type": "t_contract(SpecialWeaponsManager)35873",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\SkillStakingRewardsUpgradeable.sol:12"
          }
        ],
        "types": {
          "t_contract(SpecialWeaponsManager)35873": {
            "label": "contract SpecialWeaponsManager"
          },
          "t_contract(IERC20)65007": {
            "label": "contract IERC20"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(CryptoBlades)44564": {
            "label": "contract CryptoBlades"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "133d8d1b68549b9e822076205b8f3a37ebc21a1c7830a6526766db5e6c70b3b3": {
      "address": "0x381988F31C56356D80cd50bE77C26ed7798599a9",
      "txHash": "0xdef566c1cbe785c971a8f74377139aa83ab894f8004d79fd1c3137bcfc5c0795",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\proxy\\Initializable.sol:25"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\proxy\\Initializable.sol:30"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:20"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:74"
          },
          {
            "contract": "RewardsDistributionRecipientUpgradeable",
            "label": "rewardsDistribution",
            "type": "t_address",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\staking\\RewardsDistributionRecipientUpgradeable.sol:9"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\utils\\ReentrancyGuardUpgradeable.sol:37"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\utils\\ReentrancyGuardUpgradeable.sol:67"
          },
          {
            "contract": "FailsafeUpgradeable",
            "label": "failsafeModeActive",
            "type": "t_bool",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\staking\\FailsafeUpgradeable.sol:7"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "_paused",
            "type": "t_bool",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\utils\\PausableUpgradeable.sol:28"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\utils\\PausableUpgradeable.sol:96"
          },
          {
            "contract": "StakingRewardsUpgradeable",
            "label": "rewardsToken",
            "type": "t_contract(IERC20)65088",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\staking\\StakingRewardsUpgradeable.sol:31"
          },
          {
            "contract": "StakingRewardsUpgradeable",
            "label": "stakingToken",
            "type": "t_contract(IERC20)65088",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\staking\\StakingRewardsUpgradeable.sol:32"
          },
          {
            "contract": "StakingRewardsUpgradeable",
            "label": "periodFinish",
            "type": "t_uint256",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\staking\\StakingRewardsUpgradeable.sol:33"
          },
          {
            "contract": "StakingRewardsUpgradeable",
            "label": "rewardRate",
            "type": "t_uint256",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\staking\\StakingRewardsUpgradeable.sol:34"
          },
          {
            "contract": "StakingRewardsUpgradeable",
            "label": "rewardsDuration",
            "type": "t_uint256",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\staking\\StakingRewardsUpgradeable.sol:35"
          },
          {
            "contract": "StakingRewardsUpgradeable",
            "label": "minimumStakeTime",
            "type": "t_uint256",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\staking\\StakingRewardsUpgradeable.sol:36"
          },
          {
            "contract": "StakingRewardsUpgradeable",
            "label": "lastUpdateTime",
            "type": "t_uint256",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\staking\\StakingRewardsUpgradeable.sol:37"
          },
          {
            "contract": "StakingRewardsUpgradeable",
            "label": "rewardPerTokenStored",
            "type": "t_uint256",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\staking\\StakingRewardsUpgradeable.sol:38"
          },
          {
            "contract": "StakingRewardsUpgradeable",
            "label": "userRewardPerTokenPaid",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\staking\\StakingRewardsUpgradeable.sol:40"
          },
          {
            "contract": "StakingRewardsUpgradeable",
            "label": "rewards",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\staking\\StakingRewardsUpgradeable.sol:41"
          },
          {
            "contract": "StakingRewardsUpgradeable",
            "label": "_totalSupply",
            "type": "t_uint256",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\staking\\StakingRewardsUpgradeable.sol:43"
          },
          {
            "contract": "StakingRewardsUpgradeable",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\staking\\StakingRewardsUpgradeable.sol:44"
          },
          {
            "contract": "StakingRewardsUpgradeable",
            "label": "_stakeTimestamp",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\staking\\StakingRewardsUpgradeable.sol:45"
          },
          {
            "contract": "StakingRewardsUpgradeable",
            "label": "__game",
            "type": "t_contract(CryptoBlades)44645",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\staking\\StakingRewardsUpgradeable.sol:48"
          },
          {
            "contract": "StakingRewardsUpgradeable",
            "label": "minimumStakeAmount",
            "type": "t_uint256",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\staking\\StakingRewardsUpgradeable.sol:50"
          }
        ],
        "types": {
          "t_contract(IERC20)65088": {
            "label": "contract IERC20"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(CryptoBlades)44645": {
            "label": "contract CryptoBlades"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "81a7b14bdf59edcfbda5901a3672a21508a9e49744ce9d3a943c701adbc11119": {
      "address": "0x3D46a75Fe98Fd4Db43A356d6B45E068fc9CfaAC9",
      "txHash": "0x4e613913c0527a507d117303317baba27a67065a78ed15da2c5173a35ccb2db7",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\proxy\\Initializable.sol:25"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\proxy\\Initializable.sol:30"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:31"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)59198_storage)",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\access\\AccessControlUpgradeable.sol:61"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\access\\AccessControlUpgradeable.sol:225"
          },
          {
            "contract": "BasicPriceOracle",
            "label": "priceSet",
            "type": "t_bool",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\BasicPriceOracle.sol:10"
          },
          {
            "contract": "BasicPriceOracle",
            "label": "currentPrice_",
            "type": "t_uint256",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\BasicPriceOracle.sol:11"
          }
        ],
        "types": {
          "t_bool": {
            "label": "bool"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)59198_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)59198_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_struct(AddressSet)63001_storage"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_struct(AddressSet)63001_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)62736_storage"
              }
            ]
          },
          "t_struct(Set)62736_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "4610c6c5f49f37b4b49109856a2b34fc2d94b3cacbe898e3b9ef942c50dcb939": {
      "address": "0x41828294D667432Fae6756E250845301003a11f3",
      "txHash": "0x1a53d46763f880303ab96c03813509fe8dc5a6d80608e2839cd07d5ecd6b184d",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\proxy\\Initializable.sol:25"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\proxy\\Initializable.sol:30"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "_supportedInterfaces",
            "type": "t_mapping(t_bytes4,t_bool)",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\introspection\\ERC165Upgradeable.sol:23"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\introspection\\ERC165Upgradeable.sol:59"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_holderTokens",
            "type": "t_mapping(t_address,t_struct(UintSet)63122_storage)",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\token\\ERC721\\ERC721Upgradeable.sol:34"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_tokenOwners",
            "type": "t_struct(UintToAddressMap)62499_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\token\\ERC721\\ERC721Upgradeable.sol:37"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_tokenApprovals",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\token\\ERC721\\ERC721Upgradeable.sol:40"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\token\\ERC721\\ERC721Upgradeable.sol:43"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\token\\ERC721\\ERC721Upgradeable.sol:46"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\token\\ERC721\\ERC721Upgradeable.sol:49"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_tokenURIs",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\token\\ERC721\\ERC721Upgradeable.sol:52"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_baseURI",
            "type": "t_string_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\token\\ERC721\\ERC721Upgradeable.sol:55"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)41_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\token\\ERC721\\ERC721Upgradeable.sol:485"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)59198_storage)",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\access\\AccessControlUpgradeable.sol:61"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\access\\AccessControlUpgradeable.sol:225"
          },
          {
            "contract": "Characters",
            "label": "tokens",
            "type": "t_array(t_struct(Character)38657_storage)dyn_storage",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\characters.sol:84"
          },
          {
            "contract": "Characters",
            "label": "cosmetics",
            "type": "t_array(t_struct(CharacterCosmetics)38662_storage)dyn_storage",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\characters.sol:85"
          },
          {
            "contract": "Characters",
            "label": "experienceTable",
            "type": "t_array(t_uint256)256_storage",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\characters.sol:89"
          },
          {
            "contract": "Characters",
            "label": "lastTransferTimestamp",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\characters.sol:92"
          },
          {
            "contract": "Characters",
            "label": "promos",
            "type": "t_contract(Promos)21671",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\characters.sol:94"
          },
          {
            "contract": "Characters",
            "label": "lastMintedBlock",
            "type": "t_uint256",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\characters.sol:96"
          },
          {
            "contract": "Characters",
            "label": "firstMintedOfLastBlock",
            "type": "t_uint256",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\characters.sol:97"
          },
          {
            "contract": "Characters",
            "label": "characterLimit",
            "type": "t_uint256",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\characters.sol:99"
          },
          {
            "contract": "Characters",
            "label": "raidsDone",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\characters.sol:101"
          },
          {
            "contract": "Characters",
            "label": "raidsWon",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\characters.sol:102"
          },
          {
            "contract": "Characters",
            "label": "nftVars",
            "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\characters.sol:110"
          },
          {
            "contract": "Characters",
            "label": "garrison",
            "type": "t_contract(Garrison)11962",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\characters.sol:113"
          },
          {
            "contract": "Characters",
            "label": "secondsPerStamina",
            "type": "t_uint256",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\characters.sol:118"
          }
        ],
        "types": {
          "t_array(t_struct(Character)38657_storage)dyn_storage": {
            "label": "struct Characters.Character[]"
          },
          "t_struct(Character)38657_storage": {
            "label": "struct Characters.Character",
            "members": [
              {
                "label": "xp",
                "type": "t_uint16"
              },
              {
                "label": "level",
                "type": "t_uint8"
              },
              {
                "label": "trait",
                "type": "t_uint8"
              },
              {
                "label": "staminaTimestamp",
                "type": "t_uint64"
              }
            ]
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_uint64": {
            "label": "uint64"
          },
          "t_array(t_struct(CharacterCosmetics)38662_storage)dyn_storage": {
            "label": "struct Characters.CharacterCosmetics[]"
          },
          "t_struct(CharacterCosmetics)38662_storage": {
            "label": "struct Characters.CharacterCosmetics",
            "members": [
              {
                "label": "version",
                "type": "t_uint8"
              },
              {
                "label": "seed",
                "type": "t_uint256"
              }
            ]
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)256_storage": {
            "label": "uint256[256]"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_contract(Promos)21671": {
            "label": "contract Promos"
          },
          "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(uint256 => mapping(uint256 => uint256))"
          },
          "t_contract(Garrison)11962": {
            "label": "contract Garrison"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)59198_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)59198_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_struct(AddressSet)63001_storage"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_struct(AddressSet)63001_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)62736_storage"
              }
            ]
          },
          "t_struct(Set)62736_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_address,t_struct(UintSet)63122_storage)": {
            "label": "mapping(address => struct EnumerableSetUpgradeable.UintSet)"
          },
          "t_address": {
            "label": "address"
          },
          "t_struct(UintSet)63122_storage": {
            "label": "struct EnumerableSetUpgradeable.UintSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)62736_storage"
              }
            ]
          },
          "t_struct(UintToAddressMap)62499_storage": {
            "label": "struct EnumerableMapUpgradeable.UintToAddressMap",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Map)62181_storage"
              }
            ]
          },
          "t_struct(Map)62181_storage": {
            "label": "struct EnumerableMapUpgradeable.Map",
            "members": [
              {
                "label": "_entries",
                "type": "t_array(t_struct(MapEntry)62173_storage)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_struct(MapEntry)62173_storage)dyn_storage": {
            "label": "struct EnumerableMapUpgradeable.MapEntry[]"
          },
          "t_struct(MapEntry)62173_storage": {
            "label": "struct EnumerableMapUpgradeable.MapEntry",
            "members": [
              {
                "label": "_key",
                "type": "t_bytes32"
              },
              {
                "label": "_value",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_mapping(t_uint256,t_string_storage)": {
            "label": "mapping(uint256 => string)"
          },
          "t_array(t_uint256)41_storage": {
            "label": "uint256[41]"
          },
          "t_mapping(t_bytes4,t_bool)": {
            "label": "mapping(bytes4 => bool)"
          },
          "t_bytes4": {
            "label": "bytes4"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "17ed0586786aeacb83a0f27d7a8d8a77b4a0ad5dea089438adbd19b341ade28d": {
      "address": "0x2178061C7D49AE551a45B3C408d251D97A6e2a15",
      "txHash": "0xd294d02116a1a9a0a5c25e53e48d7bae0eccfaf7305a1824ba52f6cebf057b87",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\proxy\\Initializable.sol:25"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\proxy\\Initializable.sol:30"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "_supportedInterfaces",
            "type": "t_mapping(t_bytes4,t_bool)",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\introspection\\ERC165Upgradeable.sol:23"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\introspection\\ERC165Upgradeable.sol:59"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_holderTokens",
            "type": "t_mapping(t_address,t_struct(UintSet)63122_storage)",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\token\\ERC721\\ERC721Upgradeable.sol:34"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_tokenOwners",
            "type": "t_struct(UintToAddressMap)62499_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\token\\ERC721\\ERC721Upgradeable.sol:37"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_tokenApprovals",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\token\\ERC721\\ERC721Upgradeable.sol:40"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\token\\ERC721\\ERC721Upgradeable.sol:43"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\token\\ERC721\\ERC721Upgradeable.sol:46"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\token\\ERC721\\ERC721Upgradeable.sol:49"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_tokenURIs",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\token\\ERC721\\ERC721Upgradeable.sol:52"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_baseURI",
            "type": "t_string_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\token\\ERC721\\ERC721Upgradeable.sol:55"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)41_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\token\\ERC721\\ERC721Upgradeable.sol:485"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)59198_storage)",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\access\\AccessControlUpgradeable.sol:61"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\access\\AccessControlUpgradeable.sol:225"
          },
          {
            "contract": "Weapons",
            "label": "tokens",
            "type": "t_array(t_struct(Weapon)55694_storage)dyn_storage",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\weapons.sol:93"
          },
          {
            "contract": "Weapons",
            "label": "cosmetics",
            "type": "t_array(t_struct(WeaponCosmetics)55706_storage)dyn_storage",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\weapons.sol:94"
          },
          {
            "contract": "Weapons",
            "label": "burnPoints",
            "type": "t_mapping(t_uint256,t_struct(WeaponBurnPoints)55701_storage)",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\weapons.sol:95"
          },
          {
            "contract": "Weapons",
            "label": "burnPointMultiplier",
            "type": "t_uint256",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\weapons.sol:97"
          },
          {
            "contract": "Weapons",
            "label": "lowStarBurnPowerPerPoint",
            "type": "t_uint256",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\weapons.sol:98"
          },
          {
            "contract": "Weapons",
            "label": "fourStarBurnPowerPerPoint",
            "type": "t_uint256",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\weapons.sol:99"
          },
          {
            "contract": "Weapons",
            "label": "fiveStarBurnPowerPerPoint",
            "type": "t_uint256",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\weapons.sol:100"
          },
          {
            "contract": "Weapons",
            "label": "oneFrac",
            "type": "t_int128",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\weapons.sol:102"
          },
          {
            "contract": "Weapons",
            "label": "powerMultPerPointBasic",
            "type": "t_int128",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\weapons.sol:103"
          },
          {
            "contract": "Weapons",
            "label": "powerMultPerPointPWR",
            "type": "t_int128",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\weapons.sol:104"
          },
          {
            "contract": "Weapons",
            "label": "powerMultPerPointMatching",
            "type": "t_int128",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\weapons.sol:105"
          },
          {
            "contract": "Weapons",
            "label": "lastTransferTimestamp",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\weapons.sol:108"
          },
          {
            "contract": "Weapons",
            "label": "lastMintedBlock",
            "type": "t_uint256",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\weapons.sol:110"
          },
          {
            "contract": "Weapons",
            "label": "firstMintedOfLastBlock",
            "type": "t_uint256",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\weapons.sol:111"
          },
          {
            "contract": "Weapons",
            "label": "durabilityTimestamp",
            "type": "t_mapping(t_uint256,t_uint64)",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\weapons.sol:113"
          },
          {
            "contract": "Weapons",
            "label": "burnDust",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\weapons.sol:118"
          },
          {
            "contract": "Weapons",
            "label": "promos",
            "type": "t_contract(Promos)21671",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\weapons.sol:120"
          },
          {
            "contract": "Weapons",
            "label": "numberParameters",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\weapons.sol:122"
          },
          {
            "contract": "Weapons",
            "label": "nftVars",
            "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\weapons.sol:124"
          }
        ],
        "types": {
          "t_array(t_struct(Weapon)55694_storage)dyn_storage": {
            "label": "struct Weapons.Weapon[]"
          },
          "t_struct(Weapon)55694_storage": {
            "label": "struct Weapons.Weapon",
            "members": [
              {
                "label": "properties",
                "type": "t_uint16"
              },
              {
                "label": "stat1",
                "type": "t_uint16"
              },
              {
                "label": "stat2",
                "type": "t_uint16"
              },
              {
                "label": "stat3",
                "type": "t_uint16"
              },
              {
                "label": "level",
                "type": "t_uint8"
              }
            ]
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_array(t_struct(WeaponCosmetics)55706_storage)dyn_storage": {
            "label": "struct Weapons.WeaponCosmetics[]"
          },
          "t_struct(WeaponCosmetics)55706_storage": {
            "label": "struct Weapons.WeaponCosmetics",
            "members": [
              {
                "label": "version",
                "type": "t_uint8"
              },
              {
                "label": "seed",
                "type": "t_uint256"
              }
            ]
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_uint256,t_struct(WeaponBurnPoints)55701_storage)": {
            "label": "mapping(uint256 => struct Weapons.WeaponBurnPoints)"
          },
          "t_struct(WeaponBurnPoints)55701_storage": {
            "label": "struct Weapons.WeaponBurnPoints",
            "members": [
              {
                "label": "lowStarBurnPoints",
                "type": "t_uint8"
              },
              {
                "label": "fourStarBurnPoints",
                "type": "t_uint8"
              },
              {
                "label": "fiveStarBurnPoints",
                "type": "t_uint8"
              }
            ]
          },
          "t_int128": {
            "label": "int128"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_uint256,t_uint64)": {
            "label": "mapping(uint256 => uint64)"
          },
          "t_uint64": {
            "label": "uint64"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(Promos)21671": {
            "label": "contract Promos"
          },
          "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(uint256 => mapping(uint256 => uint256))"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)59198_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)59198_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_struct(AddressSet)63001_storage"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_struct(AddressSet)63001_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)62736_storage"
              }
            ]
          },
          "t_struct(Set)62736_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_address,t_struct(UintSet)63122_storage)": {
            "label": "mapping(address => struct EnumerableSetUpgradeable.UintSet)"
          },
          "t_struct(UintSet)63122_storage": {
            "label": "struct EnumerableSetUpgradeable.UintSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)62736_storage"
              }
            ]
          },
          "t_struct(UintToAddressMap)62499_storage": {
            "label": "struct EnumerableMapUpgradeable.UintToAddressMap",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Map)62181_storage"
              }
            ]
          },
          "t_struct(Map)62181_storage": {
            "label": "struct EnumerableMapUpgradeable.Map",
            "members": [
              {
                "label": "_entries",
                "type": "t_array(t_struct(MapEntry)62173_storage)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_struct(MapEntry)62173_storage)dyn_storage": {
            "label": "struct EnumerableMapUpgradeable.MapEntry[]"
          },
          "t_struct(MapEntry)62173_storage": {
            "label": "struct EnumerableMapUpgradeable.MapEntry",
            "members": [
              {
                "label": "_key",
                "type": "t_bytes32"
              },
              {
                "label": "_value",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_mapping(t_uint256,t_string_storage)": {
            "label": "mapping(uint256 => string)"
          },
          "t_array(t_uint256)41_storage": {
            "label": "uint256[41]"
          },
          "t_mapping(t_bytes4,t_bool)": {
            "label": "mapping(bytes4 => bool)"
          },
          "t_bytes4": {
            "label": "bytes4"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "5146a7dc6d73df2d8536ba5b624551a4c5b36a6afa1c93f579b7919cb4bb6188": {
      "address": "0xD4328358d6ad48b8D832069b3C1e11c71d684070",
      "txHash": "0x41361072e0604bb0b3ac13a405fc7b71ca9dafbd2dedc91cd5abd1b01c8448d0",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\proxy\\Initializable.sol:25"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\proxy\\Initializable.sol:30"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:31"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)59198_storage)",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\access\\AccessControlUpgradeable.sol:61"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\access\\AccessControlUpgradeable.sol:225"
          },
          {
            "contract": "CryptoBlades",
            "label": "characters",
            "type": "t_contract(Characters)40611",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\cryptoblades.sol:81"
          },
          {
            "contract": "CryptoBlades",
            "label": "weapons",
            "type": "t_contract(Weapons)58751",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\cryptoblades.sol:82"
          },
          {
            "contract": "CryptoBlades",
            "label": "skillToken",
            "type": "t_contract(IERC20)65007",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\cryptoblades.sol:83"
          },
          {
            "contract": "CryptoBlades",
            "label": "priceOracleSkillPerUsd",
            "type": "t_contract(IPriceOracle)44653",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\cryptoblades.sol:84"
          },
          {
            "contract": "CryptoBlades",
            "label": "randoms",
            "type": "t_contract(IRandoms)44672",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\cryptoblades.sol:85"
          },
          {
            "contract": "CryptoBlades",
            "label": "characterLimit",
            "type": "t_uint256",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\cryptoblades.sol:161"
          },
          {
            "contract": "CryptoBlades",
            "label": "staminaCostFight",
            "type": "t_uint8",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\cryptoblades.sol:163"
          },
          {
            "contract": "CryptoBlades",
            "label": "mintCharacterFee",
            "type": "t_int128",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\cryptoblades.sol:166"
          },
          {
            "contract": "CryptoBlades",
            "label": "refillStaminaFee",
            "type": "t_int128",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\cryptoblades.sol:169"
          },
          {
            "contract": "CryptoBlades",
            "label": "fightRewardBaseline",
            "type": "t_int128",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\cryptoblades.sol:172"
          },
          {
            "contract": "CryptoBlades",
            "label": "fightRewardGasOffset",
            "type": "t_int128",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\cryptoblades.sol:173"
          },
          {
            "contract": "CryptoBlades",
            "label": "mintWeaponFee",
            "type": "t_int128",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\cryptoblades.sol:175"
          },
          {
            "contract": "CryptoBlades",
            "label": "reforgeWeaponFee",
            "type": "t_int128",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\cryptoblades.sol:176"
          },
          {
            "contract": "CryptoBlades",
            "label": "nonce",
            "type": "t_uint256",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\cryptoblades.sol:178"
          },
          {
            "contract": "CryptoBlades",
            "label": "lastBlockNumberCalled",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\cryptoblades.sol:180"
          },
          {
            "contract": "CryptoBlades",
            "label": "fightXpGain",
            "type": "t_uint256",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\cryptoblades.sol:182"
          },
          {
            "contract": "CryptoBlades",
            "label": "tokenRewards",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\cryptoblades.sol:184"
          },
          {
            "contract": "CryptoBlades",
            "label": "xpRewards",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\cryptoblades.sol:185"
          },
          {
            "contract": "CryptoBlades",
            "label": "oneFrac",
            "type": "t_int128",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\cryptoblades.sol:187"
          },
          {
            "contract": "CryptoBlades",
            "label": "fightTraitBonus",
            "type": "t_int128",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\cryptoblades.sol:188"
          },
          {
            "contract": "CryptoBlades",
            "label": "inGameOnlyFunds",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\cryptoblades.sol:190"
          },
          {
            "contract": "CryptoBlades",
            "label": "totalInGameOnlyFunds",
            "type": "t_uint256",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\cryptoblades.sol:191"
          },
          {
            "contract": "CryptoBlades",
            "label": "promos",
            "type": "t_contract(Promos)21671",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\cryptoblades.sol:193"
          },
          {
            "contract": "CryptoBlades",
            "label": "_rewardsClaimTaxTimerStart",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\cryptoblades.sol:195"
          },
          {
            "contract": "CryptoBlades",
            "label": "stakeFromGameImpl",
            "type": "t_contract(IStakeFromGame)44689",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\cryptoblades.sol:197"
          },
          {
            "contract": "CryptoBlades",
            "label": "durabilityCostFight",
            "type": "t_uint8",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\cryptoblades.sol:199"
          },
          {
            "contract": "CryptoBlades",
            "label": "burnWeaponFee",
            "type": "t_int128",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\cryptoblades.sol:201"
          },
          {
            "contract": "CryptoBlades",
            "label": "reforgeWeaponWithDustFee",
            "type": "t_int128",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\cryptoblades.sol:202"
          },
          {
            "contract": "CryptoBlades",
            "label": "blacksmith",
            "type": "t_contract(Blacksmith)1764",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\cryptoblades.sol:204"
          },
          {
            "contract": "CryptoBlades",
            "label": "mintPayments",
            "type": "t_mapping(t_address,t_struct(MintPayment)41424_storage)",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\cryptoblades.sol:213"
          },
          {
            "contract": "CryptoBlades",
            "label": "totalMintPaymentSkillRefundable",
            "type": "t_uint256",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\cryptoblades.sol:227"
          },
          {
            "contract": "CryptoBlades",
            "label": "mintPaymentSkillDepositeds",
            "type": "t_mapping(t_address,t_struct(MintPaymentSkillDeposited)41443_storage)",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\cryptoblades.sol:228"
          },
          {
            "contract": "CryptoBlades",
            "label": "rewardsClaimTaxMax",
            "type": "t_int128",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\cryptoblades.sol:230"
          },
          {
            "contract": "CryptoBlades",
            "label": "rewardsClaimTaxDuration",
            "type": "t_uint256",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\cryptoblades.sol:231"
          },
          {
            "contract": "CryptoBlades",
            "label": "vars",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\cryptoblades.sol:233"
          },
          {
            "contract": "CryptoBlades",
            "label": "userVars",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\cryptoblades.sol:234"
          },
          {
            "contract": "CryptoBlades",
            "label": "specialWeaponsManager",
            "type": "t_contract(SpecialWeaponsManager)35873",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\cryptoblades.sol:236"
          },
          {
            "contract": "CryptoBlades",
            "label": "links",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\cryptoblades.sol:237"
          }
        ],
        "types": {
          "t_contract(Characters)40611": {
            "label": "contract Characters"
          },
          "t_contract(Weapons)58751": {
            "label": "contract Weapons"
          },
          "t_contract(IERC20)65007": {
            "label": "contract IERC20"
          },
          "t_contract(IPriceOracle)44653": {
            "label": "contract IPriceOracle"
          },
          "t_contract(IRandoms)44672": {
            "label": "contract IRandoms"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_int128": {
            "label": "int128"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_contract(Promos)21671": {
            "label": "contract Promos"
          },
          "t_contract(IStakeFromGame)44689": {
            "label": "contract IStakeFromGame"
          },
          "t_contract(Blacksmith)1764": {
            "label": "contract Blacksmith"
          },
          "t_mapping(t_address,t_struct(MintPayment)41424_storage)": {
            "label": "mapping(address => struct CryptoBlades.MintPayment)"
          },
          "t_struct(MintPayment)41424_storage": {
            "label": "struct CryptoBlades.MintPayment",
            "members": [
              {
                "label": "blockHash",
                "type": "t_bytes32"
              },
              {
                "label": "blockNumber",
                "type": "t_uint256"
              },
              {
                "label": "nftAddress",
                "type": "t_address"
              },
              {
                "label": "count",
                "type": "t_uint256"
              }
            ]
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_mapping(t_address,t_struct(MintPaymentSkillDeposited)41443_storage)": {
            "label": "mapping(address => struct CryptoBlades.MintPaymentSkillDeposited)"
          },
          "t_struct(MintPaymentSkillDeposited)41443_storage": {
            "label": "struct CryptoBlades.MintPaymentSkillDeposited",
            "members": [
              {
                "label": "skillDepositedFromWallet",
                "type": "t_uint256"
              },
              {
                "label": "skillDepositedFromRewards",
                "type": "t_uint256"
              },
              {
                "label": "skillDepositedFromIgo",
                "type": "t_uint256"
              },
              {
                "label": "skillRefundableFromWallet",
                "type": "t_uint256"
              },
              {
                "label": "skillRefundableFromRewards",
                "type": "t_uint256"
              },
              {
                "label": "skillRefundableFromIgo",
                "type": "t_uint256"
              },
              {
                "label": "refundClaimableTimestamp",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(address => mapping(uint256 => uint256))"
          },
          "t_contract(SpecialWeaponsManager)35873": {
            "label": "contract SpecialWeaponsManager"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)59198_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_struct(RoleData)59198_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_struct(AddressSet)63001_storage"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_struct(AddressSet)63001_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)62736_storage"
              }
            ]
          },
          "t_struct(Set)62736_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_bool": {
            "label": "bool"
          }
        }
      }
    },
    "4c0f0e6fc7c8f3ba20b0a543fd7b958478140b107aaa5486d95ac18cb6c24547": {
      "address": "0x2F2f6F494F7aa5B2aDA5837E717e0503Fd762776",
      "txHash": "0x29cd30d236fef566f24834205fc15e05820da07424dbfac9b7e352592c7d7d3e",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\proxy\\Initializable.sol:25"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\proxy\\Initializable.sol:30"
          },
          {
            "contract": "MultiAccessUpgradeable",
            "label": "access",
            "type": "t_mapping(t_address,t_bool)",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\multiAccessUpgradeable.sol:8"
          },
          {
            "contract": "Raid",
            "label": "completed",
            "type": "t_bool",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\raid.sol:17"
          },
          {
            "contract": "Raid",
            "label": "expectedFinishTime",
            "type": "t_uint256",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\raid.sol:18"
          },
          {
            "contract": "Raid",
            "label": "game",
            "type": "t_contract(CryptoBlades)44564",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\raid.sol:20"
          },
          {
            "contract": "Raid",
            "label": "characters",
            "type": "t_contract(Characters)40611",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\raid.sol:21"
          },
          {
            "contract": "Raid",
            "label": "weapons",
            "type": "t_contract(Weapons)58751",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\raid.sol:22"
          },
          {
            "contract": "Raid",
            "label": "raiders",
            "type": "t_array(t_struct(Raider)46166_storage)dyn_storage",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\raid.sol:30"
          },
          {
            "contract": "Raid",
            "label": "participation",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\raid.sol:31"
          },
          {
            "contract": "RaidBasic",
            "label": "staminaDrain",
            "type": "t_uint64",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\raidBasic.sol:14"
          },
          {
            "contract": "RaidBasic",
            "label": "weaponDrops",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\raidBasic.sol:15"
          },
          {
            "contract": "RaidBasic",
            "label": "bounty",
            "type": "t_uint256",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\raidBasic.sol:16"
          },
          {
            "contract": "RaidBasic",
            "label": "bossTrait",
            "type": "t_uint8",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\raidBasic.sol:17"
          },
          {
            "contract": "RaidBasic",
            "label": "totalPower",
            "type": "t_uint256",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\raidBasic.sol:19"
          }
        ],
        "types": {
          "t_uint64": {
            "label": "uint64"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_contract(CryptoBlades)44564": {
            "label": "contract CryptoBlades"
          },
          "t_contract(Characters)40611": {
            "label": "contract Characters"
          },
          "t_contract(Weapons)58751": {
            "label": "contract Weapons"
          },
          "t_array(t_struct(Raider)46166_storage)dyn_storage": {
            "label": "struct Raid.Raider[]"
          },
          "t_struct(Raider)46166_storage": {
            "label": "struct Raid.Raider",
            "members": [
              {
                "label": "owner",
                "type": "t_uint256"
              },
              {
                "label": "charID",
                "type": "t_uint256"
              },
              {
                "label": "wepID",
                "type": "t_uint256"
              },
              {
                "label": "power",
                "type": "t_uint24"
              }
            ]
          },
          "t_uint24": {
            "label": "uint24"
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_address": {
            "label": "address"
          }
        }
      }
    },
    "95f758510d4ac618cf362308573cb1756ade60b330a7de18b3e763a1822c2eb4": {
      "address": "0xb43014900D9b789b48A6A496329DfFEE111F0bF7",
      "txHash": "0xea60aa0cd3a731f6ee581aa6d6908fb2dd9e3cd54837c7d602dc3e80d5e71c48",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\proxy\\Initializable.sol:25"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\proxy\\Initializable.sol:30"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:31"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)59198_storage)",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\access\\AccessControlUpgradeable.sol:61"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\access\\AccessControlUpgradeable.sol:225"
          },
          {
            "contract": "NFTMarket",
            "label": "skillToken",
            "type": "t_contract(IERC20)65007",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\NFTMarket.sol:86"
          },
          {
            "contract": "NFTMarket",
            "label": "taxRecipient",
            "type": "t_address",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\NFTMarket.sol:87"
          },
          {
            "contract": "NFTMarket",
            "label": "listings",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Listing)15565_storage))",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\NFTMarket.sol:90"
          },
          {
            "contract": "NFTMarket",
            "label": "listedTokenIDs",
            "type": "t_mapping(t_address,t_struct(UintSet)66052_storage)",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\NFTMarket.sol:92"
          },
          {
            "contract": "NFTMarket",
            "label": "listedTokenTypes",
            "type": "t_struct(AddressSet)65931_storage",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\NFTMarket.sol:94"
          },
          {
            "contract": "NFTMarket",
            "label": "isTokenBanned",
            "type": "t_mapping(t_address,t_bool)",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\NFTMarket.sol:97"
          },
          {
            "contract": "NFTMarket",
            "label": "isUserBanned",
            "type": "t_mapping(t_address,t_bool)",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\NFTMarket.sol:99"
          },
          {
            "contract": "NFTMarket",
            "label": "tax",
            "type": "t_mapping(t_address,t_int128)",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\NFTMarket.sol:102"
          },
          {
            "contract": "NFTMarket",
            "label": "freeTax",
            "type": "t_mapping(t_address,t_bool)",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\NFTMarket.sol:104"
          },
          {
            "contract": "NFTMarket",
            "label": "defaultTax",
            "type": "t_int128",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\NFTMarket.sol:105"
          },
          {
            "contract": "NFTMarket",
            "label": "allowedTokenTypes",
            "type": "t_struct(AddressSet)65931_storage",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\NFTMarket.sol:108"
          },
          {
            "contract": "NFTMarket",
            "label": "weapons",
            "type": "t_contract(Weapons)58751",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\NFTMarket.sol:110"
          },
          {
            "contract": "NFTMarket",
            "label": "characters",
            "type": "t_contract(Characters)40611",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\NFTMarket.sol:111"
          },
          {
            "contract": "NFTMarket",
            "label": "priceOracleSkillPerUsd",
            "type": "t_contract(IPriceOracle)44653",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\NFTMarket.sol:113"
          },
          {
            "contract": "NFTMarket",
            "label": "addFee",
            "type": "t_int128",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\NFTMarket.sol:114"
          },
          {
            "contract": "NFTMarket",
            "label": "changeFee",
            "type": "t_int128",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\NFTMarket.sol:115"
          },
          {
            "contract": "NFTMarket",
            "label": "nftTargetBuyers",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_address))",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\NFTMarket.sol:118"
          },
          {
            "contract": "NFTMarket",
            "label": "burningManager",
            "type": "t_contract(BurningManager)2926",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\NFTMarket.sol:120"
          }
        ],
        "types": {
          "t_contract(IERC20)65007": {
            "label": "contract IERC20"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_struct(Listing)15565_storage))": {
            "label": "mapping(address => mapping(uint256 => struct NFTMarket.Listing))"
          },
          "t_mapping(t_uint256,t_struct(Listing)15565_storage)": {
            "label": "mapping(uint256 => struct NFTMarket.Listing)"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_struct(Listing)15565_storage": {
            "label": "struct NFTMarket.Listing",
            "members": [
              {
                "label": "seller",
                "type": "t_address"
              },
              {
                "label": "price",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_address,t_struct(UintSet)66052_storage)": {
            "label": "mapping(address => struct EnumerableSet.UintSet)"
          },
          "t_struct(UintSet)66052_storage": {
            "label": "struct EnumerableSet.UintSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)65666_storage"
              }
            ]
          },
          "t_struct(Set)65666_storage": {
            "label": "struct EnumerableSet.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_struct(AddressSet)65931_storage": {
            "label": "struct EnumerableSet.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)65666_storage"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_address,t_int128)": {
            "label": "mapping(address => int128)"
          },
          "t_int128": {
            "label": "int128"
          },
          "t_contract(Weapons)58751": {
            "label": "contract Weapons"
          },
          "t_contract(Characters)40611": {
            "label": "contract Characters"
          },
          "t_contract(IPriceOracle)44653": {
            "label": "contract IPriceOracle"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_address))": {
            "label": "mapping(address => mapping(uint256 => address))"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)"
          },
          "t_contract(BurningManager)2926": {
            "label": "contract BurningManager"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)59198_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_struct(RoleData)59198_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_struct(AddressSet)63001_storage"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_struct(AddressSet)63001_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)62736_storage"
              }
            ]
          },
          "t_struct(Set)62736_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "c1009c3de4d06ffe5f5d5ee4601d916e4c0d6414ddf0237c12a167957eee273e": {
      "address": "0x77304ec53311484139237e7D0fe496d741097482",
      "txHash": "0x171e805a2ff26de5c13d714bfc39f362632617a4e55e2a5a8d40725e0e0a3dd4",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\proxy\\Initializable.sol:25"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\proxy\\Initializable.sol:30"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:31"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)59198_storage)",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\access\\AccessControlUpgradeable.sol:61"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\access\\AccessControlUpgradeable.sol:225"
          },
          {
            "contract": "WaxBridge",
            "label": "latestWaxChainBlockNumberProcessed",
            "type": "t_uint256",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\WaxBridge.sol:27"
          },
          {
            "contract": "WaxBridge",
            "label": "totalOwedBnb",
            "type": "t_uint256",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\WaxBridge.sol:28"
          },
          {
            "contract": "WaxBridge",
            "label": "bnbLimitPerPeriod",
            "type": "t_uint256",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\WaxBridge.sol:29"
          },
          {
            "contract": "WaxBridge",
            "label": "bnbLimitTimestamp",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\WaxBridge.sol:30"
          },
          {
            "contract": "WaxBridge",
            "label": "withdrawableBnb",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\WaxBridge.sol:31"
          },
          {
            "contract": "WaxBridge",
            "label": "withdrawnBnbDuringPeriod",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\WaxBridge.sol:32"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)59198_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)59198_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_struct(AddressSet)63001_storage"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_struct(AddressSet)63001_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)62736_storage"
              }
            ]
          },
          "t_struct(Set)62736_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_bool": {
            "label": "bool"
          }
        }
      }
    },
    "498e2a0b3757e479509d6aec2c2acfebb9b98f681a684fb0bae2c243d547bfca": {
      "address": "0xCEc9b32Fa39FA04dDFACC4F460B8bE0c90FA0D17",
      "txHash": "0xba08e46cc3ee5344b36c0fa38dec9379b3b5a19f2bc62ea6de48a0901424b602",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\proxy\\Initializable.sol:25"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\proxy\\Initializable.sol:30"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:31"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)59198_storage)",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\access\\AccessControlUpgradeable.sol:61"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\access\\AccessControlUpgradeable.sol:225"
          },
          {
            "contract": "Promos",
            "label": "bits",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\Promos.sol:27"
          },
          {
            "contract": "Promos",
            "label": "firstCharacterPromoInGameOnlyFundsGivenInUsd",
            "type": "t_int128",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\Promos.sol:33"
          }
        ],
        "types": {
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_address": {
            "label": "address"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_int128": {
            "label": "int128"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)59198_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)59198_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_struct(AddressSet)63001_storage"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_struct(AddressSet)63001_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)62736_storage"
              }
            ]
          },
          "t_struct(Set)62736_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_bool": {
            "label": "bool"
          }
        }
      }
    },
    "ed4ca7c8e59553a198610e7d92dc71bb8e635e2155c62c0d1c71d5887925992a": {
      "address": "0xc51D0A416D39d6e2E522BC28252aAeFa1A2A4466",
      "txHash": "0xdabf4879045712e93b190257c6191ee96f13aabe70c3e38eaea7218a5a534cd6",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\proxy\\Initializable.sol:25"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\proxy\\Initializable.sol:30"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:31"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)59198_storage)",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\access\\AccessControlUpgradeable.sol:61"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\access\\AccessControlUpgradeable.sol:225"
          },
          {
            "contract": "Blacksmith",
            "label": "weapons",
            "type": "t_contract(Weapons)58751",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\Blacksmith.sol:45"
          },
          {
            "contract": "Blacksmith",
            "label": "randoms",
            "type": "t_contract(IRandoms)44672",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\Blacksmith.sol:46"
          },
          {
            "contract": "Blacksmith",
            "label": "tickets",
            "type": "t_mapping(t_address,t_uint32)",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\Blacksmith.sol:48"
          },
          {
            "contract": "Blacksmith",
            "label": "shields",
            "type": "t_contract(Shields)51194",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\Blacksmith.sol:50"
          },
          {
            "contract": "Blacksmith",
            "label": "game",
            "type": "t_contract(CryptoBlades)44564",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\Blacksmith.sol:51"
          },
          {
            "contract": "Blacksmith",
            "label": "itemAddresses",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\Blacksmith.sol:55"
          },
          {
            "contract": "Blacksmith",
            "label": "itemFlatPrices",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\Blacksmith.sol:56"
          },
          {
            "contract": "Blacksmith",
            "label": "numberParameters",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\Blacksmith.sol:58"
          },
          {
            "contract": "Blacksmith",
            "label": "itemSeriesFlatPrices",
            "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\Blacksmith.sol:60"
          },
          {
            "contract": "Blacksmith",
            "label": "cbkLandSale",
            "type": "t_contract(CBKLandSale)7305",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\Blacksmith.sol:61"
          },
          {
            "contract": "Blacksmith",
            "label": "landPrices",
            "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\Blacksmith.sol:63"
          },
          {
            "contract": "Blacksmith",
            "label": "currencies",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\Blacksmith.sol:64"
          },
          {
            "contract": "Blacksmith",
            "label": "links",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\Blacksmith.sol:66"
          }
        ],
        "types": {
          "t_contract(Weapons)58751": {
            "label": "contract Weapons"
          },
          "t_contract(IRandoms)44672": {
            "label": "contract IRandoms"
          },
          "t_mapping(t_address,t_uint32)": {
            "label": "mapping(address => uint32)"
          },
          "t_address": {
            "label": "address"
          },
          "t_uint32": {
            "label": "uint32"
          },
          "t_contract(Shields)51194": {
            "label": "contract Shields"
          },
          "t_contract(CryptoBlades)44564": {
            "label": "contract CryptoBlades"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(uint256 => mapping(uint256 => uint256))"
          },
          "t_contract(CBKLandSale)7305": {
            "label": "contract CBKLandSale"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)59198_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)59198_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_struct(AddressSet)63001_storage"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_struct(AddressSet)63001_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)62736_storage"
              }
            ]
          },
          "t_struct(Set)62736_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_bool": {
            "label": "bool"
          }
        }
      }
    },
    "f758871d900d68e362f025b56f6aef6d5677bdda98f6acf25f9e76f5eb66aede": {
      "address": "0xB3583c623F449C0073f2a30bbbFB0Cf7c185FA49",
      "txHash": "0xe590efe2bd08fd0b9bd4d623453a824af6ec30fdda684d82a5bc1f7c408dc3f3",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\proxy\\Initializable.sol:25"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\proxy\\Initializable.sol:30"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "_supportedInterfaces",
            "type": "t_mapping(t_bytes4,t_bool)",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\introspection\\ERC165Upgradeable.sol:23"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\introspection\\ERC165Upgradeable.sol:59"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_holderTokens",
            "type": "t_mapping(t_address,t_struct(UintSet)63122_storage)",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\token\\ERC721\\ERC721Upgradeable.sol:34"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_tokenOwners",
            "type": "t_struct(UintToAddressMap)62499_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\token\\ERC721\\ERC721Upgradeable.sol:37"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_tokenApprovals",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\token\\ERC721\\ERC721Upgradeable.sol:40"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\token\\ERC721\\ERC721Upgradeable.sol:43"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\token\\ERC721\\ERC721Upgradeable.sol:46"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\token\\ERC721\\ERC721Upgradeable.sol:49"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_tokenURIs",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\token\\ERC721\\ERC721Upgradeable.sol:52"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_baseURI",
            "type": "t_string_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\token\\ERC721\\ERC721Upgradeable.sol:55"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)41_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\token\\ERC721\\ERC721Upgradeable.sol:485"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)59198_storage)",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\access\\AccessControlUpgradeable.sol:61"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\access\\AccessControlUpgradeable.sol:225"
          },
          {
            "contract": "Shields",
            "label": "tokens",
            "type": "t_array(t_struct(Shield)49224_storage)dyn_storage",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\shields.sol:59"
          },
          {
            "contract": "Shields",
            "label": "cosmetics",
            "type": "t_array(t_struct(ShieldCosmetics)49229_storage)dyn_storage",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\shields.sol:60"
          },
          {
            "contract": "Shields",
            "label": "shieldBaseMultiplier",
            "type": "t_int128",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\shields.sol:62"
          },
          {
            "contract": "Shields",
            "label": "defenseMultPerPointBasic",
            "type": "t_int128",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\shields.sol:63"
          },
          {
            "contract": "Shields",
            "label": "defenseMultPerPointDEF",
            "type": "t_int128",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\shields.sol:64"
          },
          {
            "contract": "Shields",
            "label": "defenseMultPerPointMatching",
            "type": "t_int128",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\shields.sol:65"
          },
          {
            "contract": "Shields",
            "label": "lastMintedBlock",
            "type": "t_uint256",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\shields.sol:67"
          },
          {
            "contract": "Shields",
            "label": "firstMintedOfLastBlock",
            "type": "t_uint256",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\shields.sol:68"
          },
          {
            "contract": "Shields",
            "label": "durabilityTimestamp",
            "type": "t_mapping(t_uint256,t_uint64)",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\shields.sol:70"
          },
          {
            "contract": "Shields",
            "label": "promos",
            "type": "t_contract(Promos)21671",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\shields.sol:75"
          },
          {
            "contract": "Shields",
            "label": "nftVars",
            "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\shields.sol:77"
          }
        ],
        "types": {
          "t_array(t_struct(Shield)49224_storage)dyn_storage": {
            "label": "struct Shields.Shield[]"
          },
          "t_struct(Shield)49224_storage": {
            "label": "struct Shields.Shield",
            "members": [
              {
                "label": "properties",
                "type": "t_uint16"
              },
              {
                "label": "stat1",
                "type": "t_uint16"
              },
              {
                "label": "stat2",
                "type": "t_uint16"
              },
              {
                "label": "stat3",
                "type": "t_uint16"
              }
            ]
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_array(t_struct(ShieldCosmetics)49229_storage)dyn_storage": {
            "label": "struct Shields.ShieldCosmetics[]"
          },
          "t_struct(ShieldCosmetics)49229_storage": {
            "label": "struct Shields.ShieldCosmetics",
            "members": [
              {
                "label": "version",
                "type": "t_uint8"
              },
              {
                "label": "seed",
                "type": "t_uint256"
              }
            ]
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_int128": {
            "label": "int128"
          },
          "t_mapping(t_uint256,t_uint64)": {
            "label": "mapping(uint256 => uint64)"
          },
          "t_uint64": {
            "label": "uint64"
          },
          "t_contract(Promos)21671": {
            "label": "contract Promos"
          },
          "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(uint256 => mapping(uint256 => uint256))"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)59198_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)59198_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_struct(AddressSet)63001_storage"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_struct(AddressSet)63001_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)62736_storage"
              }
            ]
          },
          "t_struct(Set)62736_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_address,t_struct(UintSet)63122_storage)": {
            "label": "mapping(address => struct EnumerableSetUpgradeable.UintSet)"
          },
          "t_address": {
            "label": "address"
          },
          "t_struct(UintSet)63122_storage": {
            "label": "struct EnumerableSetUpgradeable.UintSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)62736_storage"
              }
            ]
          },
          "t_struct(UintToAddressMap)62499_storage": {
            "label": "struct EnumerableMapUpgradeable.UintToAddressMap",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Map)62181_storage"
              }
            ]
          },
          "t_struct(Map)62181_storage": {
            "label": "struct EnumerableMapUpgradeable.Map",
            "members": [
              {
                "label": "_entries",
                "type": "t_array(t_struct(MapEntry)62173_storage)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_struct(MapEntry)62173_storage)dyn_storage": {
            "label": "struct EnumerableMapUpgradeable.MapEntry[]"
          },
          "t_struct(MapEntry)62173_storage": {
            "label": "struct EnumerableMapUpgradeable.MapEntry",
            "members": [
              {
                "label": "_key",
                "type": "t_bytes32"
              },
              {
                "label": "_value",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_mapping(t_uint256,t_string_storage)": {
            "label": "mapping(uint256 => string)"
          },
          "t_array(t_uint256)41_storage": {
            "label": "uint256[41]"
          },
          "t_mapping(t_bytes4,t_bool)": {
            "label": "mapping(bytes4 => bool)"
          },
          "t_bytes4": {
            "label": "bytes4"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "5a71bda464eb057b97363461c14823213429810d25dc96133f5e156ebdd93ef3": {
      "address": "0xAA6a85f5083EE4F4050401c9A17418BD39ba781D",
      "txHash": "0x21ede4d5814ff45aa15eaf849cecda9cc42495d4863100d50a63329ef5e9476f",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\proxy\\Initializable.sol:25"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\proxy\\Initializable.sol:30"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:31"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)59198_storage)",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\access\\AccessControlUpgradeable.sol:61"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\access\\AccessControlUpgradeable.sol:225"
          },
          {
            "contract": "Consumables",
            "label": "owned",
            "type": "t_mapping(t_address,t_uint32)",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\Consumables.sol:13"
          },
          {
            "contract": "Consumables",
            "label": "_enabled",
            "type": "t_bool",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\Consumables.sol:15"
          },
          {
            "contract": "CharacterRenameTagConsumables",
            "label": "characters",
            "type": "t_contract(Characters)40611",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\CharacterRenameTagConsumables.sol:8"
          },
          {
            "contract": "CharacterRenameTagConsumables",
            "label": "_minSize",
            "type": "t_uint8",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\CharacterRenameTagConsumables.sol:10"
          },
          {
            "contract": "CharacterRenameTagConsumables",
            "label": "_maxSize",
            "type": "t_uint8",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\CharacterRenameTagConsumables.sol:11"
          },
          {
            "contract": "CharacterRenameTagConsumables",
            "label": "renames",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\CharacterRenameTagConsumables.sol:13"
          }
        ],
        "types": {
          "t_contract(Characters)40611": {
            "label": "contract Characters"
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_mapping(t_uint256,t_string_storage)": {
            "label": "mapping(uint256 => string)"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_mapping(t_address,t_uint32)": {
            "label": "mapping(address => uint32)"
          },
          "t_address": {
            "label": "address"
          },
          "t_uint32": {
            "label": "uint32"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)59198_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)59198_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_struct(AddressSet)63001_storage"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_struct(AddressSet)63001_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)62736_storage"
              }
            ]
          },
          "t_struct(Set)62736_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "e2a94e5476f89e4df095abfa2bf42ee5b09e40238514bc7546cdbe17e48519f3": {
      "address": "0xd82c05D72b40c2698ba40afcD7AEde344D7A76e3",
      "txHash": "0xfa197b2d0cbbed213f49ee9a0f5147b4fa36a802f35e6b48e138a34cdff364d2",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\proxy\\Initializable.sol:25"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\proxy\\Initializable.sol:30"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:31"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)59198_storage)",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\access\\AccessControlUpgradeable.sol:61"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\access\\AccessControlUpgradeable.sol:225"
          },
          {
            "contract": "Consumables",
            "label": "owned",
            "type": "t_mapping(t_address,t_uint32)",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\Consumables.sol:13"
          },
          {
            "contract": "Consumables",
            "label": "_enabled",
            "type": "t_bool",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\Consumables.sol:15"
          },
          {
            "contract": "WeaponRenameTagConsumables",
            "label": "weapons",
            "type": "t_contract(Weapons)58751",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\WeaponRenameTagConsumables.sol:8"
          },
          {
            "contract": "WeaponRenameTagConsumables",
            "label": "_minSize",
            "type": "t_uint8",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\WeaponRenameTagConsumables.sol:10"
          },
          {
            "contract": "WeaponRenameTagConsumables",
            "label": "_maxSize",
            "type": "t_uint8",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\WeaponRenameTagConsumables.sol:11"
          },
          {
            "contract": "WeaponRenameTagConsumables",
            "label": "renames",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\WeaponRenameTagConsumables.sol:13"
          }
        ],
        "types": {
          "t_contract(Weapons)58751": {
            "label": "contract Weapons"
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_mapping(t_uint256,t_string_storage)": {
            "label": "mapping(uint256 => string)"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_mapping(t_address,t_uint32)": {
            "label": "mapping(address => uint32)"
          },
          "t_address": {
            "label": "address"
          },
          "t_uint32": {
            "label": "uint32"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)59198_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)59198_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_struct(AddressSet)63001_storage"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_struct(AddressSet)63001_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)62736_storage"
              }
            ]
          },
          "t_struct(Set)62736_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "d4322f7eb3a20b3806459092652155a844a07307cdea3231b7e644e90eaf0cc7": {
      "address": "0x5E8A9867296854e569E81781b545C3dd4Ad0b1Ee",
      "txHash": "0x2a95e3e7392781d6940d09e87d334d3706c6ecdea20e6a9ec92792ce372e66ef",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\proxy\\Initializable.sol:25"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\proxy\\Initializable.sol:30"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:31"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)59198_storage)",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\access\\AccessControlUpgradeable.sol:61"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\access\\AccessControlUpgradeable.sol:225"
          },
          {
            "contract": "Consumables",
            "label": "owned",
            "type": "t_mapping(t_address,t_uint32)",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\Consumables.sol:13"
          },
          {
            "contract": "Consumables",
            "label": "_enabled",
            "type": "t_bool",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\Consumables.sol:15"
          },
          {
            "contract": "CharacterFireTraitChangeConsumables",
            "label": "characters",
            "type": "t_contract(Characters)40611",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\CharacterFireTraitChangeConsumables.sol:8"
          }
        ],
        "types": {
          "t_contract(Characters)40611": {
            "label": "contract Characters"
          },
          "t_mapping(t_address,t_uint32)": {
            "label": "mapping(address => uint32)"
          },
          "t_address": {
            "label": "address"
          },
          "t_uint32": {
            "label": "uint32"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)59198_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)59198_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_struct(AddressSet)63001_storage"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_struct(AddressSet)63001_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)62736_storage"
              }
            ]
          },
          "t_struct(Set)62736_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "5e1d8625a92e88e37048891a31e12336c43f4f7fade4fb791c74336d4a81b1d0": {
      "address": "0x246AEcdC9EeACb493ba1C575A975046765ae4Efc",
      "txHash": "0xfaa1c611f786b984db161773df1b036bf9f4306964e7a67a095a82889cecb329",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\proxy\\Initializable.sol:25"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\proxy\\Initializable.sol:30"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:31"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)59198_storage)",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\access\\AccessControlUpgradeable.sol:61"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\access\\AccessControlUpgradeable.sol:225"
          },
          {
            "contract": "Consumables",
            "label": "owned",
            "type": "t_mapping(t_address,t_uint32)",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\Consumables.sol:13"
          },
          {
            "contract": "Consumables",
            "label": "_enabled",
            "type": "t_bool",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\Consumables.sol:15"
          },
          {
            "contract": "CharacterEarthTraitChangeConsumables",
            "label": "characters",
            "type": "t_contract(Characters)40611",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\CharacterEarthTraitChangeConsumables.sol:8"
          }
        ],
        "types": {
          "t_contract(Characters)40611": {
            "label": "contract Characters"
          },
          "t_mapping(t_address,t_uint32)": {
            "label": "mapping(address => uint32)"
          },
          "t_address": {
            "label": "address"
          },
          "t_uint32": {
            "label": "uint32"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)59198_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)59198_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_struct(AddressSet)63001_storage"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_struct(AddressSet)63001_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)62736_storage"
              }
            ]
          },
          "t_struct(Set)62736_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "7e65f4b8daed7de019900bac4443cf47cde2f31aac348f3705c2542ad0e49541": {
      "address": "0xBe3EF1DC2478fC92F839d0f63e2854Bc6c912fF0",
      "txHash": "0xbf0a0fe8aee71636625f49dafa809985b4aff6143579e3a7685ba9e0593098a7",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\proxy\\Initializable.sol:25"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\proxy\\Initializable.sol:30"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:31"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)59198_storage)",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\access\\AccessControlUpgradeable.sol:61"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\access\\AccessControlUpgradeable.sol:225"
          },
          {
            "contract": "Consumables",
            "label": "owned",
            "type": "t_mapping(t_address,t_uint32)",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\Consumables.sol:13"
          },
          {
            "contract": "Consumables",
            "label": "_enabled",
            "type": "t_bool",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\Consumables.sol:15"
          },
          {
            "contract": "CharacterWaterTraitChangeConsumables",
            "label": "characters",
            "type": "t_contract(Characters)40611",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\CharacterWaterTraitChangeConsumables.sol:8"
          }
        ],
        "types": {
          "t_contract(Characters)40611": {
            "label": "contract Characters"
          },
          "t_mapping(t_address,t_uint32)": {
            "label": "mapping(address => uint32)"
          },
          "t_address": {
            "label": "address"
          },
          "t_uint32": {
            "label": "uint32"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)59198_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)59198_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_struct(AddressSet)63001_storage"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_struct(AddressSet)63001_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)62736_storage"
              }
            ]
          },
          "t_struct(Set)62736_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "cb3787187641ad8d28f7c96c64ed6b49b53bcaf28794b61f791de65f05114e62": {
      "address": "0xf8138668F488f496251bA9A4d8aBB943B034577C",
      "txHash": "0xd5178d9260e335247a7cc38e28893835e1f4444b40784670f1164de24abaec11",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\proxy\\Initializable.sol:25"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\proxy\\Initializable.sol:30"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:31"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)59198_storage)",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\access\\AccessControlUpgradeable.sol:61"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\access\\AccessControlUpgradeable.sol:225"
          },
          {
            "contract": "Consumables",
            "label": "owned",
            "type": "t_mapping(t_address,t_uint32)",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\Consumables.sol:13"
          },
          {
            "contract": "Consumables",
            "label": "_enabled",
            "type": "t_bool",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\Consumables.sol:15"
          },
          {
            "contract": "CharacterLightningTraitChangeConsumables",
            "label": "characters",
            "type": "t_contract(Characters)40611",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\CharacterLightningTraitChangeConsumables.sol:8"
          }
        ],
        "types": {
          "t_contract(Characters)40611": {
            "label": "contract Characters"
          },
          "t_mapping(t_address,t_uint32)": {
            "label": "mapping(address => uint32)"
          },
          "t_address": {
            "label": "address"
          },
          "t_uint32": {
            "label": "uint32"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)59198_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)59198_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_struct(AddressSet)63001_storage"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_struct(AddressSet)63001_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)62736_storage"
              }
            ]
          },
          "t_struct(Set)62736_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "1199c84cbc69989a68ca094dbaec7dba05d2d521f54e003f96d16194126777d5": {
      "address": "0x48CFEeB1b0505Fb9C29F757f92C5387BB27D7bd8",
      "txHash": "0x946ed4191edf45d8b9e77e7f2b3d3e29e60eb06da908aa915942b7b26cf2b3e1",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\proxy\\Initializable.sol:25"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\proxy\\Initializable.sol:30"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "_supportedInterfaces",
            "type": "t_mapping(t_bytes4,t_bool)",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\introspection\\ERC165Upgradeable.sol:23"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\introspection\\ERC165Upgradeable.sol:59"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_holderTokens",
            "type": "t_mapping(t_address,t_struct(UintSet)63122_storage)",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\token\\ERC721\\ERC721Upgradeable.sol:34"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_tokenOwners",
            "type": "t_struct(UintToAddressMap)62499_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\token\\ERC721\\ERC721Upgradeable.sol:37"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_tokenApprovals",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\token\\ERC721\\ERC721Upgradeable.sol:40"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\token\\ERC721\\ERC721Upgradeable.sol:43"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\token\\ERC721\\ERC721Upgradeable.sol:46"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\token\\ERC721\\ERC721Upgradeable.sol:49"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_tokenURIs",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\token\\ERC721\\ERC721Upgradeable.sol:52"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_baseURI",
            "type": "t_string_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\token\\ERC721\\ERC721Upgradeable.sol:55"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)41_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\token\\ERC721\\ERC721Upgradeable.sol:485"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)59198_storage)",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\access\\AccessControlUpgradeable.sol:61"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\access\\AccessControlUpgradeable.sol:225"
          },
          {
            "contract": "KeyLootbox",
            "label": "promos",
            "type": "t_contract(Promos)21671",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\items\\KeyLootbox.sol:14"
          },
          {
            "contract": "KeyLootbox",
            "label": "nextTokenID",
            "type": "t_uint256",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\items\\KeyLootbox.sol:16"
          }
        ],
        "types": {
          "t_contract(Promos)21671": {
            "label": "contract Promos"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)59198_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)59198_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_struct(AddressSet)63001_storage"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_struct(AddressSet)63001_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)62736_storage"
              }
            ]
          },
          "t_struct(Set)62736_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_address,t_struct(UintSet)63122_storage)": {
            "label": "mapping(address => struct EnumerableSetUpgradeable.UintSet)"
          },
          "t_address": {
            "label": "address"
          },
          "t_struct(UintSet)63122_storage": {
            "label": "struct EnumerableSetUpgradeable.UintSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)62736_storage"
              }
            ]
          },
          "t_struct(UintToAddressMap)62499_storage": {
            "label": "struct EnumerableMapUpgradeable.UintToAddressMap",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Map)62181_storage"
              }
            ]
          },
          "t_struct(Map)62181_storage": {
            "label": "struct EnumerableMapUpgradeable.Map",
            "members": [
              {
                "label": "_entries",
                "type": "t_array(t_struct(MapEntry)62173_storage)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_struct(MapEntry)62173_storage)dyn_storage": {
            "label": "struct EnumerableMapUpgradeable.MapEntry[]"
          },
          "t_struct(MapEntry)62173_storage": {
            "label": "struct EnumerableMapUpgradeable.MapEntry",
            "members": [
              {
                "label": "_key",
                "type": "t_bytes32"
              },
              {
                "label": "_value",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_mapping(t_uint256,t_string_storage)": {
            "label": "mapping(uint256 => string)"
          },
          "t_array(t_uint256)41_storage": {
            "label": "uint256[41]"
          },
          "t_mapping(t_bytes4,t_bool)": {
            "label": "mapping(bytes4 => bool)"
          },
          "t_bytes4": {
            "label": "bytes4"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "b9738c0efbe4c9a68c14345015cf7841a3560b4d6386102cb215c23d8f340726": {
      "address": "0x0e8A9FFD54b10Bd13910ffEF45e30452BC2ed4C8",
      "txHash": "0xa50156066e43f43f1496dfda74067821656cbf4829d004f80576b34b6cef9695",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\proxy\\Initializable.sol:25"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\proxy\\Initializable.sol:30"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "_supportedInterfaces",
            "type": "t_mapping(t_bytes4,t_bool)",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\introspection\\ERC165Upgradeable.sol:23"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\introspection\\ERC165Upgradeable.sol:59"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_holderTokens",
            "type": "t_mapping(t_address,t_struct(UintSet)63122_storage)",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\token\\ERC721\\ERC721Upgradeable.sol:34"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_tokenOwners",
            "type": "t_struct(UintToAddressMap)62499_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\token\\ERC721\\ERC721Upgradeable.sol:37"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_tokenApprovals",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\token\\ERC721\\ERC721Upgradeable.sol:40"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\token\\ERC721\\ERC721Upgradeable.sol:43"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\token\\ERC721\\ERC721Upgradeable.sol:46"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\token\\ERC721\\ERC721Upgradeable.sol:49"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_tokenURIs",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\token\\ERC721\\ERC721Upgradeable.sol:52"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_baseURI",
            "type": "t_string_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\token\\ERC721\\ERC721Upgradeable.sol:55"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)41_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\token\\ERC721\\ERC721Upgradeable.sol:485"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)59198_storage)",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\access\\AccessControlUpgradeable.sol:61"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\access\\AccessControlUpgradeable.sol:225"
          },
          {
            "contract": "RaidTrinket",
            "label": "promos",
            "type": "t_contract(Promos)21671",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\items\\RaidTrinket.sol:24"
          },
          {
            "contract": "RaidTrinket",
            "label": "tokenStars",
            "type": "t_mapping(t_uint256,t_uint8)",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\items\\RaidTrinket.sol:26"
          },
          {
            "contract": "RaidTrinket",
            "label": "tokenEffect",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\items\\RaidTrinket.sol:27"
          },
          {
            "contract": "RaidTrinket",
            "label": "nextTokenID",
            "type": "t_uint256",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\items\\RaidTrinket.sol:29"
          }
        ],
        "types": {
          "t_contract(Promos)21671": {
            "label": "contract Promos"
          },
          "t_mapping(t_uint256,t_uint8)": {
            "label": "mapping(uint256 => uint8)"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)59198_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)59198_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_struct(AddressSet)63001_storage"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_struct(AddressSet)63001_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)62736_storage"
              }
            ]
          },
          "t_struct(Set)62736_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_address,t_struct(UintSet)63122_storage)": {
            "label": "mapping(address => struct EnumerableSetUpgradeable.UintSet)"
          },
          "t_address": {
            "label": "address"
          },
          "t_struct(UintSet)63122_storage": {
            "label": "struct EnumerableSetUpgradeable.UintSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)62736_storage"
              }
            ]
          },
          "t_struct(UintToAddressMap)62499_storage": {
            "label": "struct EnumerableMapUpgradeable.UintToAddressMap",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Map)62181_storage"
              }
            ]
          },
          "t_struct(Map)62181_storage": {
            "label": "struct EnumerableMapUpgradeable.Map",
            "members": [
              {
                "label": "_entries",
                "type": "t_array(t_struct(MapEntry)62173_storage)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_struct(MapEntry)62173_storage)dyn_storage": {
            "label": "struct EnumerableMapUpgradeable.MapEntry[]"
          },
          "t_struct(MapEntry)62173_storage": {
            "label": "struct EnumerableMapUpgradeable.MapEntry",
            "members": [
              {
                "label": "_key",
                "type": "t_bytes32"
              },
              {
                "label": "_value",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_mapping(t_uint256,t_string_storage)": {
            "label": "mapping(uint256 => string)"
          },
          "t_array(t_uint256)41_storage": {
            "label": "uint256[41]"
          },
          "t_mapping(t_bytes4,t_bool)": {
            "label": "mapping(bytes4 => bool)"
          },
          "t_bytes4": {
            "label": "bytes4"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "ef866e30444112d8e6944502b95a58dd9faff31480b12ed8a3fd6108bbfc27e1": {
      "address": "0x2C958E0418579f5935ae018074f8B547E8889d43",
      "txHash": "0xf32f4b7cc20ed799d2c3d2b3b0b0666004ef9ac9916e4c89a9f42750ed013fa4",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\proxy\\Initializable.sol:25"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\proxy\\Initializable.sol:30"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "_supportedInterfaces",
            "type": "t_mapping(t_bytes4,t_bool)",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\introspection\\ERC165Upgradeable.sol:23"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\introspection\\ERC165Upgradeable.sol:59"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_holderTokens",
            "type": "t_mapping(t_address,t_struct(UintSet)63122_storage)",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\token\\ERC721\\ERC721Upgradeable.sol:34"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_tokenOwners",
            "type": "t_struct(UintToAddressMap)62499_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\token\\ERC721\\ERC721Upgradeable.sol:37"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_tokenApprovals",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\token\\ERC721\\ERC721Upgradeable.sol:40"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\token\\ERC721\\ERC721Upgradeable.sol:43"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\token\\ERC721\\ERC721Upgradeable.sol:46"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\token\\ERC721\\ERC721Upgradeable.sol:49"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_tokenURIs",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\token\\ERC721\\ERC721Upgradeable.sol:52"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_baseURI",
            "type": "t_string_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\token\\ERC721\\ERC721Upgradeable.sol:55"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)41_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\token\\ERC721\\ERC721Upgradeable.sol:485"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)59198_storage)",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\access\\AccessControlUpgradeable.sol:61"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\access\\AccessControlUpgradeable.sol:225"
          },
          {
            "contract": "Junk",
            "label": "promos",
            "type": "t_contract(Promos)21671",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\items\\Junk.sol:23"
          },
          {
            "contract": "Junk",
            "label": "tokenStars",
            "type": "t_mapping(t_uint256,t_uint8)",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\items\\Junk.sol:25"
          },
          {
            "contract": "Junk",
            "label": "nextTokenID",
            "type": "t_uint256",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\items\\Junk.sol:27"
          }
        ],
        "types": {
          "t_contract(Promos)21671": {
            "label": "contract Promos"
          },
          "t_mapping(t_uint256,t_uint8)": {
            "label": "mapping(uint256 => uint8)"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)59198_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)59198_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_struct(AddressSet)63001_storage"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_struct(AddressSet)63001_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)62736_storage"
              }
            ]
          },
          "t_struct(Set)62736_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_address,t_struct(UintSet)63122_storage)": {
            "label": "mapping(address => struct EnumerableSetUpgradeable.UintSet)"
          },
          "t_address": {
            "label": "address"
          },
          "t_struct(UintSet)63122_storage": {
            "label": "struct EnumerableSetUpgradeable.UintSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)62736_storage"
              }
            ]
          },
          "t_struct(UintToAddressMap)62499_storage": {
            "label": "struct EnumerableMapUpgradeable.UintToAddressMap",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Map)62181_storage"
              }
            ]
          },
          "t_struct(Map)62181_storage": {
            "label": "struct EnumerableMapUpgradeable.Map",
            "members": [
              {
                "label": "_entries",
                "type": "t_array(t_struct(MapEntry)62173_storage)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_struct(MapEntry)62173_storage)dyn_storage": {
            "label": "struct EnumerableMapUpgradeable.MapEntry[]"
          },
          "t_struct(MapEntry)62173_storage": {
            "label": "struct EnumerableMapUpgradeable.MapEntry",
            "members": [
              {
                "label": "_key",
                "type": "t_bytes32"
              },
              {
                "label": "_value",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_mapping(t_uint256,t_string_storage)": {
            "label": "mapping(uint256 => string)"
          },
          "t_array(t_uint256)41_storage": {
            "label": "uint256[41]"
          },
          "t_mapping(t_bytes4,t_bool)": {
            "label": "mapping(bytes4 => bool)"
          },
          "t_bytes4": {
            "label": "bytes4"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "d63bc8a4c1cc0ed9b0098a350a329ea4a12584c3eb65965d5a7f46ad25c32ef2": {
      "address": "0x64A16277e5f7145947cF72c39eE3c2C9c77F4e88",
      "txHash": "0xd7d28993e47d8cefdc54a7a873b156b5eee5e0db68c6be7d9103b9d45092a74a",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\proxy\\Initializable.sol:25"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\proxy\\Initializable.sol:30"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:31"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)59198_storage)",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\access\\AccessControlUpgradeable.sol:61"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\access\\AccessControlUpgradeable.sol:225"
          },
          {
            "contract": "Raid1",
            "label": "game",
            "type": "t_contract(CryptoBlades)44564",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\raid1.sol:49"
          },
          {
            "contract": "Raid1",
            "label": "characters",
            "type": "t_contract(Characters)40611",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\raid1.sol:50"
          },
          {
            "contract": "Raid1",
            "label": "weapons",
            "type": "t_contract(Weapons)58751",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\raid1.sol:51"
          },
          {
            "contract": "Raid1",
            "label": "promos",
            "type": "t_contract(Promos)21671",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\raid1.sol:52"
          },
          {
            "contract": "Raid1",
            "label": "staminaCost",
            "type": "t_uint64",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\raid1.sol:62"
          },
          {
            "contract": "Raid1",
            "label": "durabilityCost",
            "type": "t_uint64",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\raid1.sol:63"
          },
          {
            "contract": "Raid1",
            "label": "joinCost",
            "type": "t_int128",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\raid1.sol:64"
          },
          {
            "contract": "Raid1",
            "label": "xpReward",
            "type": "t_uint16",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\raid1.sol:65"
          },
          {
            "contract": "Raid1",
            "label": "raidIndex",
            "type": "t_uint256",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\raid1.sol:67"
          },
          {
            "contract": "Raid1",
            "label": "raidStatus",
            "type": "t_mapping(t_uint256,t_uint8)",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\raid1.sol:69"
          },
          {
            "contract": "Raid1",
            "label": "raidEndTime",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\raid1.sol:70"
          },
          {
            "contract": "Raid1",
            "label": "raidSeed",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\raid1.sol:71"
          },
          {
            "contract": "Raid1",
            "label": "raidBossTrait",
            "type": "t_mapping(t_uint256,t_uint8)",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\raid1.sol:72"
          },
          {
            "contract": "Raid1",
            "label": "raidBossPower",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\raid1.sol:73"
          },
          {
            "contract": "Raid1",
            "label": "raidPlayerPower",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\raid1.sol:74"
          },
          {
            "contract": "Raid1",
            "label": "raidParticipants",
            "type": "t_mapping(t_uint256,t_array(t_struct(Raider)46399_storage)dyn_storage)",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\raid1.sol:75"
          },
          {
            "contract": "Raid1",
            "label": "raidParticipantIndices",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_array(t_uint256)dyn_storage))",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\raid1.sol:76"
          },
          {
            "contract": "Raid1",
            "label": "raidRewardClaimed",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_bool))",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\raid1.sol:77"
          },
          {
            "contract": "Raid1",
            "label": "links",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\raid1.sol:81"
          },
          {
            "contract": "Raid1",
            "label": "numberParameters",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\raid1.sol:83"
          }
        ],
        "types": {
          "t_contract(CryptoBlades)44564": {
            "label": "contract CryptoBlades"
          },
          "t_contract(Characters)40611": {
            "label": "contract Characters"
          },
          "t_contract(Weapons)58751": {
            "label": "contract Weapons"
          },
          "t_contract(Promos)21671": {
            "label": "contract Promos"
          },
          "t_uint64": {
            "label": "uint64"
          },
          "t_int128": {
            "label": "int128"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_uint256,t_uint8)": {
            "label": "mapping(uint256 => uint8)"
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_uint256,t_array(t_struct(Raider)46399_storage)dyn_storage)": {
            "label": "mapping(uint256 => struct Raid1.Raider[])"
          },
          "t_array(t_struct(Raider)46399_storage)dyn_storage": {
            "label": "struct Raid1.Raider[]"
          },
          "t_struct(Raider)46399_storage": {
            "label": "struct Raid1.Raider",
            "members": [
              {
                "label": "owner",
                "type": "t_address"
              },
              {
                "label": "charID",
                "type": "t_uint256"
              },
              {
                "label": "wepID",
                "type": "t_uint256"
              },
              {
                "label": "power",
                "type": "t_uint24"
              },
              {
                "label": "traitsCWS",
                "type": "t_uint24"
              }
            ]
          },
          "t_address": {
            "label": "address"
          },
          "t_uint24": {
            "label": "uint24"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_array(t_uint256)dyn_storage))": {
            "label": "mapping(uint256 => mapping(address => uint256[]))"
          },
          "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(address => uint256[])"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_bool))": {
            "label": "mapping(uint256 => mapping(address => bool))"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)59198_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)59198_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_struct(AddressSet)63001_storage"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_struct(AddressSet)63001_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)62736_storage"
              }
            ]
          },
          "t_struct(Set)62736_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "8569567bec2ffba20ca3a832081619a67f9ca884c879097748bd54679990eb16": {
      "address": "0x54655EbcA278A3F56fAa0a5E93B4086D59A658AD",
      "txHash": "0x810360d65d123f3332547f2c12b295b8655433744dedcb08cb291148f2593e05",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\proxy\\Initializable.sol:25"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\proxy\\Initializable.sol:30"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:31"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)59198_storage)",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\access\\AccessControlUpgradeable.sol:61"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\access\\AccessControlUpgradeable.sol:225"
          },
          {
            "contract": "Cosmetics",
            "label": "owned",
            "type": "t_mapping(t_address,t_mapping(t_uint32,t_uint32))",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\Cosmetics.sol:18"
          },
          {
            "contract": "Cosmetics",
            "label": "_cosmeticAvailable",
            "type": "t_mapping(t_uint32,t_bool)",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\Cosmetics.sol:20"
          },
          {
            "contract": "WeaponCosmetics",
            "label": "weapons",
            "type": "t_contract(Weapons)58751",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\WeaponCosmetics.sol:8"
          },
          {
            "contract": "WeaponCosmetics",
            "label": "appliedCosmetics",
            "type": "t_mapping(t_uint256,t_uint32)",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\WeaponCosmetics.sol:10"
          }
        ],
        "types": {
          "t_contract(Weapons)58751": {
            "label": "contract Weapons"
          },
          "t_mapping(t_uint256,t_uint32)": {
            "label": "mapping(uint256 => uint32)"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_uint32": {
            "label": "uint32"
          },
          "t_mapping(t_address,t_mapping(t_uint32,t_uint32))": {
            "label": "mapping(address => mapping(uint32 => uint32))"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_uint32,t_uint32)": {
            "label": "mapping(uint32 => uint32)"
          },
          "t_mapping(t_uint32,t_bool)": {
            "label": "mapping(uint32 => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)59198_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)59198_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_struct(AddressSet)63001_storage"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_struct(AddressSet)63001_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)62736_storage"
              }
            ]
          },
          "t_struct(Set)62736_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "a89b2e0d698c0976302d6ee58efdef40db33c07d81248c34c5f0ae00e5136d5e": {
      "address": "0x1BE34946b13F9493E0d3b94A4196C6Fc5F16D2B2",
      "txHash": "0x2ffa431268239a4b721bcaba9820eae1dd26ed05fde371a2ca1bc682de091ed0",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\proxy\\Initializable.sol:25"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\proxy\\Initializable.sol:30"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:31"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)59198_storage)",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\access\\AccessControlUpgradeable.sol:61"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\access\\AccessControlUpgradeable.sol:225"
          },
          {
            "contract": "Cosmetics",
            "label": "owned",
            "type": "t_mapping(t_address,t_mapping(t_uint32,t_uint32))",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\Cosmetics.sol:18"
          },
          {
            "contract": "Cosmetics",
            "label": "_cosmeticAvailable",
            "type": "t_mapping(t_uint32,t_bool)",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\Cosmetics.sol:20"
          },
          {
            "contract": "CharacterCosmetics",
            "label": "characters",
            "type": "t_contract(Characters)40611",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\CharacterCosmetics.sol:8"
          },
          {
            "contract": "CharacterCosmetics",
            "label": "appliedCosmetics",
            "type": "t_mapping(t_uint256,t_uint32)",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\CharacterCosmetics.sol:10"
          }
        ],
        "types": {
          "t_contract(Characters)40611": {
            "label": "contract Characters"
          },
          "t_mapping(t_uint256,t_uint32)": {
            "label": "mapping(uint256 => uint32)"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_uint32": {
            "label": "uint32"
          },
          "t_mapping(t_address,t_mapping(t_uint32,t_uint32))": {
            "label": "mapping(address => mapping(uint32 => uint32))"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_uint32,t_uint32)": {
            "label": "mapping(uint32 => uint32)"
          },
          "t_mapping(t_uint32,t_bool)": {
            "label": "mapping(uint32 => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)59198_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)59198_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_struct(AddressSet)63001_storage"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_struct(AddressSet)63001_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)62736_storage"
              }
            ]
          },
          "t_struct(Set)62736_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "6c7740de8df3626c5e4a28f5b6faf2c49f8c5f3d4d3a3720cf776400a4491a86": {
      "address": "0x81EFBe6d9Df231AA65aFcE38437fbB99D3577Bd8",
      "txHash": "0x9f74373e58a5fdb1a8a6b7a152e88d9149b51617fc15f71f7989ab852e870988",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\proxy\\Initializable.sol:25"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\proxy\\Initializable.sol:30"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:31"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)59198_storage)",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\access\\AccessControlUpgradeable.sol:61"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\access\\AccessControlUpgradeable.sol:225"
          },
          {
            "contract": "NFTStorage",
            "label": "weapons",
            "type": "t_contract(Weapons)58751",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\NFTStorage.sol:28"
          },
          {
            "contract": "NFTStorage",
            "label": "characters",
            "type": "t_contract(Characters)40611",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\NFTStorage.sol:29"
          },
          {
            "contract": "NFTStorage",
            "label": "nftMarket",
            "type": "t_contract(NFTMarket)18066",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\NFTStorage.sol:30"
          },
          {
            "contract": "NFTStorage",
            "label": "weaponRenameTagConsumables",
            "type": "t_contract(WeaponRenameTagConsumables)38496",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\NFTStorage.sol:31"
          },
          {
            "contract": "NFTStorage",
            "label": "characterRenameTagConsumables",
            "type": "t_contract(CharacterRenameTagConsumables)8501",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\NFTStorage.sol:32"
          },
          {
            "contract": "NFTStorage",
            "label": "weaponCosmetics",
            "type": "t_contract(WeaponCosmetics)38304",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\NFTStorage.sol:33"
          },
          {
            "contract": "NFTStorage",
            "label": "characterCosmetics",
            "type": "t_contract(CharacterCosmetics)8069",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\NFTStorage.sol:34"
          },
          {
            "contract": "NFTStorage",
            "label": "storageEnabled",
            "type": "t_bool",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\NFTStorage.sol:36"
          },
          {
            "contract": "NFTStorage",
            "label": "storedItems",
            "type": "t_mapping(t_address,t_mapping(t_address,t_struct(UintSet)66052_storage))",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\NFTStorage.sol:38"
          },
          {
            "contract": "NFTStorage",
            "label": "storedItemsOwners",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_address))",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\NFTStorage.sol:40"
          },
          {
            "contract": "NFTStorage",
            "label": "allStoredItems",
            "type": "t_mapping(t_address,t_struct(UintSet)66052_storage)",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\NFTStorage.sol:42"
          },
          {
            "contract": "NFTStorage",
            "label": "nftChainIds",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_string_storage))",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\NFTStorage.sol:44"
          },
          {
            "contract": "NFTStorage",
            "label": "_transfersOutAt",
            "type": "t_uint256",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\NFTStorage.sol:69"
          },
          {
            "contract": "NFTStorage",
            "label": "_transfersOutCount",
            "type": "t_uint256",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\NFTStorage.sol:70"
          },
          {
            "contract": "NFTStorage",
            "label": "_bridgeEnabled",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\NFTStorage.sol:71"
          },
          {
            "contract": "NFTStorage",
            "label": "_chainPrefix",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\NFTStorage.sol:72"
          },
          {
            "contract": "NFTStorage",
            "label": "_botEnabled",
            "type": "t_bool",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\NFTStorage.sol:73"
          },
          {
            "contract": "NFTStorage",
            "label": "transferOuts",
            "type": "t_mapping(t_uint256,t_struct(TransferOut)18175_storage)",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\NFTStorage.sol:74"
          },
          {
            "contract": "NFTStorage",
            "label": "transferOutOfPlayers",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\NFTStorage.sol:78"
          },
          {
            "contract": "NFTStorage",
            "label": "transferOutOfNFTs",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\NFTStorage.sol:82"
          },
          {
            "contract": "NFTStorage",
            "label": "supportedTokenTypes",
            "type": "t_struct(AddressSet)65931_storage",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\NFTStorage.sol:85"
          },
          {
            "contract": "NFTStorage",
            "label": "nftTypeToAddress",
            "type": "t_mapping(t_uint8,t_address)",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\NFTStorage.sol:95"
          },
          {
            "contract": "NFTStorage",
            "label": "receivedNFTs",
            "type": "t_mapping(t_address,t_struct(UintSet)66052_storage)",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\NFTStorage.sol:115"
          },
          {
            "contract": "NFTStorage",
            "label": "_transferInsAt",
            "type": "t_uint256",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\NFTStorage.sol:117"
          },
          {
            "contract": "NFTStorage",
            "label": "transferIns",
            "type": "t_mapping(t_uint256,t_struct(TransferIn)18241_storage)",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\NFTStorage.sol:118"
          },
          {
            "contract": "NFTStorage",
            "label": "transferInsMeta",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\NFTStorage.sol:119"
          },
          {
            "contract": "NFTStorage",
            "label": "transferInSeeds",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\NFTStorage.sol:120"
          },
          {
            "contract": "NFTStorage",
            "label": "_supportedChains",
            "type": "t_struct(UintSet)66052_storage",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\NFTStorage.sol:123"
          },
          {
            "contract": "NFTStorage",
            "label": "_transferInsLog",
            "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_mapping(t_uint256,t_uint256)))",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\NFTStorage.sol:126"
          },
          {
            "contract": "NFTStorage",
            "label": "_withdrawFromBridgeLog",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\NFTStorage.sol:128"
          },
          {
            "contract": "NFTStorage",
            "label": "game",
            "type": "t_contract(CryptoBlades)44564",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\NFTStorage.sol:130"
          },
          {
            "contract": "NFTStorage",
            "label": "_bridgeFee",
            "type": "t_uint256",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\NFTStorage.sol:131"
          },
          {
            "contract": "NFTStorage",
            "label": "nftChainIdsToMintId",
            "type": "t_mapping(t_address,t_mapping(t_string_memory_ptr,t_uint256))",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\NFTStorage.sol:134"
          },
          {
            "contract": "NFTStorage",
            "label": "transferInChainId",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\NFTStorage.sol:136"
          },
          {
            "contract": "NFTStorage",
            "label": "promos",
            "type": "t_contract(Promos)21671",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\NFTStorage.sol:138"
          },
          {
            "contract": "NFTStorage",
            "label": "_localChainPrefix",
            "type": "t_string_storage",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\NFTStorage.sol:140"
          },
          {
            "contract": "NFTStorage",
            "label": "shields",
            "type": "t_contract(Shields)51194",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\NFTStorage.sol:142"
          },
          {
            "contract": "NFTStorage",
            "label": "nftProxyContract",
            "type": "t_mapping(t_address,t_address)",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\NFTStorage.sol:146"
          },
          {
            "contract": "NFTStorage",
            "label": "bot2p0Log",
            "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\NFTStorage.sol:148"
          },
          {
            "contract": "NFTStorage",
            "label": "nftAllowedChains",
            "type": "t_mapping(t_address,t_struct(UintSet)66052_storage)",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\NFTStorage.sol:150"
          },
          {
            "contract": "NFTStorage",
            "label": "targetChainAllowedNFTs",
            "type": "t_mapping(t_uint256,t_struct(AddressSet)65931_storage)",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\NFTStorage.sol:152"
          },
          {
            "contract": "NFTStorage",
            "label": "isNftBridged",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\NFTStorage.sol:154"
          },
          {
            "contract": "NFTStorage",
            "label": "withdrawFromStorageNativeFee",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\NFTStorage.sol:155"
          },
          {
            "contract": "NFTStorage",
            "label": "requestBridgeNativeFee",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\NFTStorage.sol:156"
          },
          {
            "contract": "NFTStorage",
            "label": "giveawayGen2Enabled",
            "type": "t_bool",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\NFTStorage.sol:170"
          }
        ],
        "types": {
          "t_contract(Weapons)58751": {
            "label": "contract Weapons"
          },
          "t_contract(Characters)40611": {
            "label": "contract Characters"
          },
          "t_contract(NFTMarket)18066": {
            "label": "contract NFTMarket"
          },
          "t_contract(WeaponRenameTagConsumables)38496": {
            "label": "contract WeaponRenameTagConsumables"
          },
          "t_contract(CharacterRenameTagConsumables)8501": {
            "label": "contract CharacterRenameTagConsumables"
          },
          "t_contract(WeaponCosmetics)38304": {
            "label": "contract WeaponCosmetics"
          },
          "t_contract(CharacterCosmetics)8069": {
            "label": "contract CharacterCosmetics"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_address,t_mapping(t_address,t_struct(UintSet)66052_storage))": {
            "label": "mapping(address => mapping(address => struct EnumerableSet.UintSet))"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_address,t_struct(UintSet)66052_storage)": {
            "label": "mapping(address => struct EnumerableSet.UintSet)"
          },
          "t_struct(UintSet)66052_storage": {
            "label": "struct EnumerableSet.UintSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)65666_storage"
              }
            ]
          },
          "t_struct(Set)65666_storage": {
            "label": "struct EnumerableSet.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_address))": {
            "label": "mapping(address => mapping(uint256 => address))"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_string_storage))": {
            "label": "mapping(address => mapping(uint256 => string))"
          },
          "t_mapping(t_uint256,t_string_storage)": {
            "label": "mapping(uint256 => string)"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_mapping(t_uint256,t_struct(TransferOut)18175_storage)": {
            "label": "mapping(uint256 => struct NFTStorage.TransferOut)"
          },
          "t_struct(TransferOut)18175_storage": {
            "label": "struct NFTStorage.TransferOut",
            "members": [
              {
                "label": "owner",
                "type": "t_address"
              },
              {
                "label": "nftAddress",
                "type": "t_address"
              },
              {
                "label": "requestBlock",
                "type": "t_uint256"
              },
              {
                "label": "lastUpdateBlock",
                "type": "t_uint256"
              },
              {
                "label": "nftId",
                "type": "t_uint256"
              },
              {
                "label": "chainId",
                "type": "t_uint256"
              },
              {
                "label": "status",
                "type": "t_uint8"
              }
            ]
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(address => mapping(uint256 => uint256))"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_struct(AddressSet)65931_storage": {
            "label": "struct EnumerableSet.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)65666_storage"
              }
            ]
          },
          "t_mapping(t_uint8,t_address)": {
            "label": "mapping(uint8 => address)"
          },
          "t_mapping(t_uint256,t_struct(TransferIn)18241_storage)": {
            "label": "mapping(uint256 => struct NFTStorage.TransferIn)"
          },
          "t_struct(TransferIn)18241_storage": {
            "label": "struct NFTStorage.TransferIn",
            "members": [
              {
                "label": "owner",
                "type": "t_address"
              },
              {
                "label": "nftType",
                "type": "t_uint8"
              },
              {
                "label": "sourceChain",
                "type": "t_uint256"
              },
              {
                "label": "sourceId",
                "type": "t_uint256"
              },
              {
                "label": "rename",
                "type": "t_string_storage"
              },
              {
                "label": "arrivedAt",
                "type": "t_uint256"
              },
              {
                "label": "lastUpdateBlock",
                "type": "t_uint256"
              },
              {
                "label": "status",
                "type": "t_uint8"
              }
            ]
          },
          "t_mapping(t_uint256,t_mapping(t_uint256,t_mapping(t_uint256,t_uint256)))": {
            "label": "mapping(uint256 => mapping(uint256 => mapping(uint256 => uint256)))"
          },
          "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(uint256 => mapping(uint256 => uint256))"
          },
          "t_contract(CryptoBlades)44564": {
            "label": "contract CryptoBlades"
          },
          "t_mapping(t_address,t_mapping(t_string_memory_ptr,t_uint256))": {
            "label": "mapping(address => mapping(string => uint256))"
          },
          "t_mapping(t_string_memory_ptr,t_uint256)": {
            "label": "mapping(string => uint256)"
          },
          "t_contract(Promos)21671": {
            "label": "contract Promos"
          },
          "t_contract(Shields)51194": {
            "label": "contract Shields"
          },
          "t_mapping(t_address,t_address)": {
            "label": "mapping(address => address)"
          },
          "t_mapping(t_uint256,t_struct(AddressSet)65931_storage)": {
            "label": "mapping(uint256 => struct EnumerableSet.AddressSet)"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_bool))": {
            "label": "mapping(address => mapping(uint256 => bool))"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)59198_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_struct(RoleData)59198_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_struct(AddressSet)63001_storage"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_struct(AddressSet)63001_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)62736_storage"
              }
            ]
          },
          "t_struct(Set)62736_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "76a697772c18d6442f84bc8f7f4c577b8c5c791896f3b0b3f595a5e4e98c7fb1": {
      "address": "0xB05b7DbD7624B5fc48c9059370f7949FB117c275",
      "txHash": "0x8d765615e846aa85a0a1e2755eb65874655fe28b1df6b1ded3121767447400c5",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\proxy\\Initializable.sol:25"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\proxy\\Initializable.sol:30"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "_supportedInterfaces",
            "type": "t_mapping(t_bytes4,t_bool)",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\introspection\\ERC165Upgradeable.sol:23"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\introspection\\ERC165Upgradeable.sol:59"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_holderTokens",
            "type": "t_mapping(t_address,t_struct(UintSet)63122_storage)",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\token\\ERC721\\ERC721Upgradeable.sol:34"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_tokenOwners",
            "type": "t_struct(UintToAddressMap)62499_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\token\\ERC721\\ERC721Upgradeable.sol:37"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_tokenApprovals",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\token\\ERC721\\ERC721Upgradeable.sol:40"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\token\\ERC721\\ERC721Upgradeable.sol:43"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\token\\ERC721\\ERC721Upgradeable.sol:46"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\token\\ERC721\\ERC721Upgradeable.sol:49"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_tokenURIs",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\token\\ERC721\\ERC721Upgradeable.sol:52"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_baseURI",
            "type": "t_string_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\token\\ERC721\\ERC721Upgradeable.sol:55"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)41_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\token\\ERC721\\ERC721Upgradeable.sol:485"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)59198_storage)",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\access\\AccessControlUpgradeable.sol:61"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\access\\AccessControlUpgradeable.sol:225"
          },
          {
            "contract": "CBKLand",
            "label": "landMinted",
            "type": "t_uint256",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\CBKLand.sol:28"
          },
          {
            "contract": "CBKLand",
            "label": "landData",
            "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\CBKLand.sol:30"
          },
          {
            "contract": "CBKLand",
            "label": "landStrData",
            "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_string_storage))",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\CBKLand.sol:32"
          },
          {
            "contract": "CBKLand",
            "label": "landBoolData",
            "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_bool))",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\CBKLand.sol:35"
          },
          {
            "contract": "CBKLand",
            "label": "landAddressData",
            "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_address))",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\CBKLand.sol:38"
          },
          {
            "contract": "CBKLand",
            "label": "tierStrData",
            "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_string_storage))",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\CBKLand.sol:41"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(uint256 => mapping(uint256 => uint256))"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_uint256,t_mapping(t_uint256,t_string_storage))": {
            "label": "mapping(uint256 => mapping(uint256 => string))"
          },
          "t_mapping(t_uint256,t_string_storage)": {
            "label": "mapping(uint256 => string)"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_mapping(t_uint256,t_mapping(t_uint256,t_bool))": {
            "label": "mapping(uint256 => mapping(uint256 => bool))"
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_uint256,t_mapping(t_uint256,t_address))": {
            "label": "mapping(uint256 => mapping(uint256 => address))"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)59198_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)59198_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_struct(AddressSet)63001_storage"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_struct(AddressSet)63001_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)62736_storage"
              }
            ]
          },
          "t_struct(Set)62736_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_address,t_struct(UintSet)63122_storage)": {
            "label": "mapping(address => struct EnumerableSetUpgradeable.UintSet)"
          },
          "t_struct(UintSet)63122_storage": {
            "label": "struct EnumerableSetUpgradeable.UintSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)62736_storage"
              }
            ]
          },
          "t_struct(UintToAddressMap)62499_storage": {
            "label": "struct EnumerableMapUpgradeable.UintToAddressMap",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Map)62181_storage"
              }
            ]
          },
          "t_struct(Map)62181_storage": {
            "label": "struct EnumerableMapUpgradeable.Map",
            "members": [
              {
                "label": "_entries",
                "type": "t_array(t_struct(MapEntry)62173_storage)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_struct(MapEntry)62173_storage)dyn_storage": {
            "label": "struct EnumerableMapUpgradeable.MapEntry[]"
          },
          "t_struct(MapEntry)62173_storage": {
            "label": "struct EnumerableMapUpgradeable.MapEntry",
            "members": [
              {
                "label": "_key",
                "type": "t_bytes32"
              },
              {
                "label": "_value",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_array(t_uint256)41_storage": {
            "label": "uint256[41]"
          },
          "t_mapping(t_bytes4,t_bool)": {
            "label": "mapping(bytes4 => bool)"
          },
          "t_bytes4": {
            "label": "bytes4"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "c1c800f14ff52cd633c88588f7f4c2f52d59936f90048cd314be262ba4e34102": {
      "address": "0x5AfE00fcBeA00F573595c7bcCB17A7679cEdb484",
      "txHash": "0xcc877425211c735d611e969fe662f9b38d6e5b288786af5554ffc104ad4645f7",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\proxy\\Initializable.sol:25"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\proxy\\Initializable.sol:30"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:31"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)59198_storage)",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\access\\AccessControlUpgradeable.sol:61"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\access\\AccessControlUpgradeable.sol:225"
          },
          {
            "contract": "CBKLandSale",
            "label": "cbkLand",
            "type": "t_contract(CBKLand)3658",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\CBKLandSale.sol:13"
          },
          {
            "contract": "CBKLandSale",
            "label": "totalSales",
            "type": "t_uint256",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\CBKLandSale.sol:45"
          },
          {
            "contract": "CBKLandSale",
            "label": "sales",
            "type": "t_mapping(t_uint256,t_struct(purchaseInfo)4147_storage)",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\CBKLandSale.sol:46"
          },
          {
            "contract": "CBKLandSale",
            "label": "purchaseAddressMapping",
            "type": "t_mapping(t_address,t_struct(purchaseInfo)4147_storage)",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\CBKLandSale.sol:47"
          },
          {
            "contract": "CBKLandSale",
            "label": "availableLand",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\CBKLandSale.sol:48"
          },
          {
            "contract": "CBKLandSale",
            "label": "chunkZoneLandSales",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\CBKLandSale.sol:49"
          },
          {
            "contract": "CBKLandSale",
            "label": "t1LandsSold",
            "type": "t_uint256",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\CBKLandSale.sol:55"
          },
          {
            "contract": "CBKLandSale",
            "label": "t2LandsSold",
            "type": "t_uint256",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\CBKLandSale.sol:60"
          },
          {
            "contract": "CBKLandSale",
            "label": "chunksWithT2Land",
            "type": "t_uint256",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\CBKLandSale.sol:61"
          },
          {
            "contract": "CBKLandSale",
            "label": "_allowedLandSalePerChunk",
            "type": "t_uint256",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\CBKLandSale.sol:63"
          },
          {
            "contract": "CBKLandSale",
            "label": "_allowedLandOffset",
            "type": "t_uint256",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\CBKLandSale.sol:64"
          },
          {
            "contract": "CBKLandSale",
            "label": "chunkT2LandSales",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\CBKLandSale.sol:67"
          },
          {
            "contract": "CBKLandSale",
            "label": "t3LandsSold",
            "type": "t_uint256",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\CBKLandSale.sol:71"
          },
          {
            "contract": "CBKLandSale",
            "label": "chunkT3LandSoldTo",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\CBKLandSale.sol:72"
          },
          {
            "contract": "CBKLandSale",
            "label": "reservedChunkIds",
            "type": "t_struct(UintSet)66052_storage",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\CBKLandSale.sol:76"
          },
          {
            "contract": "CBKLandSale",
            "label": "_enabled",
            "type": "t_bool",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\CBKLandSale.sol:78"
          },
          {
            "contract": "CBKLandSale",
            "label": "_reservedEnabled",
            "type": "t_bool",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\CBKLandSale.sol:79"
          },
          {
            "contract": "CBKLandSale",
            "label": "reservedChunks",
            "type": "t_mapping(t_address,t_struct(UintSet)66052_storage)",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\CBKLandSale.sol:81"
          },
          {
            "contract": "CBKLandSale",
            "label": "reservedChunksCounter",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\CBKLandSale.sol:82"
          },
          {
            "contract": "CBKLandSale",
            "label": "chunksReservedFor",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\CBKLandSale.sol:83"
          },
          {
            "contract": "CBKLandSale",
            "label": "resellerLandBudget",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\CBKLandSale.sol:86"
          },
          {
            "contract": "CBKLandSale",
            "label": "playerReservedLandAt",
            "type": "t_uint256",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\CBKLandSale.sol:89"
          },
          {
            "contract": "CBKLandSale",
            "label": "playerReservedLands",
            "type": "t_mapping(t_address,t_struct(UintSet)66052_storage)",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\CBKLandSale.sol:90"
          },
          {
            "contract": "CBKLandSale",
            "label": "playerReservedLandTier",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\CBKLandSale.sol:91"
          },
          {
            "contract": "CBKLandSale",
            "label": "playerReservedLandReseller",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\CBKLandSale.sol:92"
          },
          {
            "contract": "CBKLandSale",
            "label": "playerReservedLandForPlayer",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\CBKLandSale.sol:93"
          },
          {
            "contract": "CBKLandSale",
            "label": "playerReservedLandClaimed",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\CBKLandSale.sol:94"
          },
          {
            "contract": "CBKLandSale",
            "label": "takenT3Chunks",
            "type": "t_struct(UintSet)66052_storage",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\CBKLandSale.sol:96"
          }
        ],
        "types": {
          "t_contract(CBKLand)3658": {
            "label": "contract CBKLand"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_uint256,t_struct(purchaseInfo)4147_storage)": {
            "label": "mapping(uint256 => struct CBKLandSale.purchaseInfo)"
          },
          "t_struct(purchaseInfo)4147_storage": {
            "label": "struct CBKLandSale.purchaseInfo",
            "members": [
              {
                "label": "buyer",
                "type": "t_address"
              },
              {
                "label": "purchasedTier",
                "type": "t_uint256"
              },
              {
                "label": "stamp",
                "type": "t_uint256"
              },
              {
                "label": "free",
                "type": "t_bool"
              }
            ]
          },
          "t_address": {
            "label": "address"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_address,t_struct(purchaseInfo)4147_storage)": {
            "label": "mapping(address => struct CBKLandSale.purchaseInfo)"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)"
          },
          "t_struct(UintSet)66052_storage": {
            "label": "struct EnumerableSet.UintSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)65666_storage"
              }
            ]
          },
          "t_struct(Set)65666_storage": {
            "label": "struct EnumerableSet.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_mapping(t_address,t_struct(UintSet)66052_storage)": {
            "label": "mapping(address => struct EnumerableSet.UintSet)"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(address => mapping(uint256 => uint256))"
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)59198_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_struct(RoleData)59198_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_struct(AddressSet)63001_storage"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_struct(AddressSet)63001_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)62736_storage"
              }
            ]
          },
          "t_struct(Set)62736_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "02a5586d519143013cb51631ee004dd1c4ba140fe8056d1f90401778b1efe895": {
      "address": "0xa458f28E063001785fD364C45c6933D1122775d3",
      "txHash": "0xb1c3492d3a3844a7f4029ebe11576c89f0f661dafe84ff2c9c4265bd3f778a8d",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\proxy\\Initializable.sol:25"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\proxy\\Initializable.sol:30"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:31"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)59198_storage)",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\access\\AccessControlUpgradeable.sol:61"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\access\\AccessControlUpgradeable.sol:225"
          },
          {
            "contract": "Merchandise",
            "label": "game",
            "type": "t_contract(CryptoBlades)44564",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\Merchandise.sol:30"
          },
          {
            "contract": "Merchandise",
            "label": "skillOracle",
            "type": "t_contract(IPriceOracle)44653",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\Merchandise.sol:31"
          },
          {
            "contract": "Merchandise",
            "label": "links",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\Merchandise.sol:33"
          },
          {
            "contract": "Merchandise",
            "label": "vars",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\Merchandise.sol:34"
          },
          {
            "contract": "Merchandise",
            "label": "itemPrices",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\Merchandise.sol:36"
          },
          {
            "contract": "Merchandise",
            "label": "nextOrderID",
            "type": "t_uint256",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\Merchandise.sol:38"
          },
          {
            "contract": "Merchandise",
            "label": "lowestUnprocessedOrderID",
            "type": "t_uint256",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\Merchandise.sol:39"
          },
          {
            "contract": "Merchandise",
            "label": "orderBuyer",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\Merchandise.sol:40"
          },
          {
            "contract": "Merchandise",
            "label": "orderPaidAmount",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\Merchandise.sol:41"
          },
          {
            "contract": "Merchandise",
            "label": "orderBaskets",
            "type": "t_mapping(t_uint256,t_array(t_uint32)dyn_storage)",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\Merchandise.sol:42"
          },
          {
            "contract": "Merchandise",
            "label": "orderData",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\Merchandise.sol:43"
          },
          {
            "contract": "Merchandise",
            "label": "externalOrderId",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\Merchandise.sol:44"
          }
        ],
        "types": {
          "t_contract(CryptoBlades)44564": {
            "label": "contract CryptoBlades"
          },
          "t_contract(IPriceOracle)44653": {
            "label": "contract IPriceOracle"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_uint256,t_array(t_uint32)dyn_storage)": {
            "label": "mapping(uint256 => uint32[])"
          },
          "t_array(t_uint32)dyn_storage": {
            "label": "uint32[]"
          },
          "t_uint32": {
            "label": "uint32"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)59198_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)59198_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_struct(AddressSet)63001_storage"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_struct(AddressSet)63001_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)62736_storage"
              }
            ]
          },
          "t_struct(Set)62736_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_bool": {
            "label": "bool"
          }
        }
      }
    },
    "70155157f2e73def7338bb53b3afe2101e85631d06bca1629e0c497f2ada2183": {
      "address": "0x31Cf5c62624288Ebf65D89d973cF7A977b194468",
      "txHash": "0x01353cf1049ddecd740101652de9654ae45a326c5de4eae6202062faf41bb8ea",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\proxy\\Initializable.sol:25"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\proxy\\Initializable.sol:30"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:31"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)59198_storage)",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\access\\AccessControlUpgradeable.sol:61"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\access\\AccessControlUpgradeable.sol:225"
          },
          {
            "contract": "Treasury",
            "label": "multiplierUnit",
            "type": "t_uint256",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\Treasury.sol:21"
          },
          {
            "contract": "Treasury",
            "label": "partneredProjects",
            "type": "t_array(t_struct(PartnerProject)36196_storage)dyn_storage",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\Treasury.sol:23"
          },
          {
            "contract": "Treasury",
            "label": "projectAddedBlockNumber",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\Treasury.sol:24"
          },
          {
            "contract": "Treasury",
            "label": "tokensClaimed",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\Treasury.sol:25"
          },
          {
            "contract": "Treasury",
            "label": "skillPrice",
            "type": "t_uint256",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\Treasury.sol:26"
          },
          {
            "contract": "Treasury",
            "label": "game",
            "type": "t_contract(CryptoBlades)44564",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\Treasury.sol:40"
          },
          {
            "contract": "Treasury",
            "label": "projectDistributionTime",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\Treasury.sol:42"
          },
          {
            "contract": "Treasury",
            "label": "multiplierTimestamp",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\Treasury.sol:43"
          },
          {
            "contract": "Treasury",
            "label": "defaultSlippage",
            "type": "t_uint256",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\Treasury.sol:44"
          },
          {
            "contract": "Treasury",
            "label": "projectLogo",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\Treasury.sol:45"
          },
          {
            "contract": "Treasury",
            "label": "projectDetails",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\Treasury.sol:46"
          },
          {
            "contract": "Treasury",
            "label": "projectWebsite",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\Treasury.sol:47"
          },
          {
            "contract": "Treasury",
            "label": "projectNote",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\Treasury.sol:48"
          },
          {
            "contract": "Treasury",
            "label": "projectIsValor",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\Treasury.sol:49"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_struct(PartnerProject)36196_storage)dyn_storage": {
            "label": "struct Treasury.PartnerProject[]"
          },
          "t_struct(PartnerProject)36196_storage": {
            "label": "struct Treasury.PartnerProject",
            "members": [
              {
                "label": "id",
                "type": "t_uint256"
              },
              {
                "label": "name",
                "type": "t_string_storage"
              },
              {
                "label": "tokenSymbol",
                "type": "t_string_storage"
              },
              {
                "label": "tokenAddress",
                "type": "t_address"
              },
              {
                "label": "tokenSupply",
                "type": "t_uint256"
              },
              {
                "label": "tokenPrice",
                "type": "t_uint256"
              },
              {
                "label": "isActive",
                "type": "t_bool"
              }
            ]
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_address": {
            "label": "address"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_contract(CryptoBlades)44564": {
            "label": "contract CryptoBlades"
          },
          "t_mapping(t_uint256,t_string_storage)": {
            "label": "mapping(uint256 => string)"
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)59198_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)59198_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_struct(AddressSet)63001_storage"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_struct(AddressSet)63001_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)62736_storage"
              }
            ]
          },
          "t_struct(Set)62736_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "4303379807e1fd8a81861c337445ef21ddaee6cacd2d59f5d7fb4eb79d5ae68a": {
      "address": "0x17027deD71445B52DF93D574f064C47Cb6C3C7D2",
      "txHash": "0xf7bfcc6afdc166bca09cabad5749be473f5bcbb2569b4a80902dc381bc69ee19",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\proxy\\Initializable.sol:25"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\proxy\\Initializable.sol:30"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:31"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)59198_storage)",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\access\\AccessControlUpgradeable.sol:61"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\access\\AccessControlUpgradeable.sol:225"
          },
          {
            "contract": "PvpArena",
            "label": "game",
            "type": "t_contract(CryptoBlades)44564",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\PvpArena.sol:45"
          },
          {
            "contract": "PvpArena",
            "label": "characters",
            "type": "t_contract(Characters)40611",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\PvpArena.sol:46"
          },
          {
            "contract": "PvpArena",
            "label": "weapons",
            "type": "t_contract(Weapons)58751",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\PvpArena.sol:47"
          },
          {
            "contract": "PvpArena",
            "label": "shields",
            "type": "t_contract(Shields)51194",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\PvpArena.sol:48"
          },
          {
            "contract": "PvpArena",
            "label": "skillToken",
            "type": "t_contract(IERC20)65007",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\PvpArena.sol:49"
          },
          {
            "contract": "PvpArena",
            "label": "randoms",
            "type": "t_contract(IRandoms)44672",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\PvpArena.sol:50"
          },
          {
            "contract": "PvpArena",
            "label": "_baseWagerUSD",
            "type": "t_int128",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\PvpArena.sol:53"
          },
          {
            "contract": "PvpArena",
            "label": "_tierWagerUSD",
            "type": "t_int128",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\PvpArena.sol:55"
          },
          {
            "contract": "PvpArena",
            "label": "_rankingsPoolTaxPercent",
            "type": "t_uint8",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\PvpArena.sol:57"
          },
          {
            "contract": "PvpArena",
            "label": "wageringFactor",
            "type": "t_uint8",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\PvpArena.sol:59"
          },
          {
            "contract": "PvpArena",
            "label": "winningPoints",
            "type": "t_uint8",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\PvpArena.sol:61"
          },
          {
            "contract": "PvpArena",
            "label": "losingPoints",
            "type": "t_uint8",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\PvpArena.sol:63"
          },
          {
            "contract": "PvpArena",
            "label": "_maxTopCharactersPerTier",
            "type": "t_uint8",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\PvpArena.sol:65"
          },
          {
            "contract": "PvpArena",
            "label": "reRollFeePercent",
            "type": "t_uint256",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\PvpArena.sol:67"
          },
          {
            "contract": "PvpArena",
            "label": "withdrawFeePercent",
            "type": "t_uint256",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\PvpArena.sol:69"
          },
          {
            "contract": "PvpArena",
            "label": "currentRankedSeason",
            "type": "t_uint256",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\PvpArena.sol:71"
          },
          {
            "contract": "PvpArena",
            "label": "seasonStartedAt",
            "type": "t_uint256",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\PvpArena.sol:73"
          },
          {
            "contract": "PvpArena",
            "label": "seasonDuration",
            "type": "t_uint256",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\PvpArena.sol:75"
          },
          {
            "contract": "PvpArena",
            "label": "decisionSeconds",
            "type": "t_uint256",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\PvpArena.sol:77"
          },
          {
            "contract": "PvpArena",
            "label": "gameCofferTaxDue",
            "type": "t_uint256",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\PvpArena.sol:79"
          },
          {
            "contract": "PvpArena",
            "label": "arenaAccess",
            "type": "t_uint256",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\PvpArena.sol:81"
          },
          {
            "contract": "PvpArena",
            "label": "prizePercentages",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\PvpArena.sol:83"
          },
          {
            "contract": "PvpArena",
            "label": "_duelQueue",
            "type": "t_struct(UintSet)66052_storage",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\PvpArena.sol:85"
          },
          {
            "contract": "PvpArena",
            "label": "fighterByCharacter",
            "type": "t_mapping(t_uint256,t_struct(Fighter)21718_storage)",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\PvpArena.sol:88"
          },
          {
            "contract": "PvpArena",
            "label": "matchByFinder",
            "type": "t_mapping(t_uint256,t_struct(Match)21725_storage)",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\PvpArena.sol:90"
          },
          {
            "contract": "PvpArena",
            "label": "isCharacterInArena",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\PvpArena.sol:92"
          },
          {
            "contract": "PvpArena",
            "label": "isWeaponInArena",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\PvpArena.sol:94"
          },
          {
            "contract": "PvpArena",
            "label": "isShieldInArena",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\PvpArena.sol:96"
          },
          {
            "contract": "PvpArena",
            "label": "isDefending",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\PvpArena.sol:98"
          },
          {
            "contract": "PvpArena",
            "label": "finderByOpponent",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\PvpArena.sol:100"
          },
          {
            "contract": "PvpArena",
            "label": "previousTierByCharacter",
            "type": "t_mapping(t_uint256,t_uint8)",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\PvpArena.sol:102"
          },
          {
            "contract": "PvpArena",
            "label": "excessWagerByCharacter",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\PvpArena.sol:104"
          },
          {
            "contract": "PvpArena",
            "label": "seasonByCharacter",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\PvpArena.sol:106"
          },
          {
            "contract": "PvpArena",
            "label": "rankingPointsByCharacter",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\PvpArena.sol:108"
          },
          {
            "contract": "PvpArena",
            "label": "rankingsPoolByTier",
            "type": "t_mapping(t_uint8,t_uint256)",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\PvpArena.sol:110"
          },
          {
            "contract": "PvpArena",
            "label": "_rankingRewardsByPlayer",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\PvpArena.sol:112"
          },
          {
            "contract": "PvpArena",
            "label": "_topRankingCharactersByTier",
            "type": "t_mapping(t_uint8,t_array(t_uint256)dyn_storage)",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\PvpArena.sol:114"
          },
          {
            "contract": "PvpArena",
            "label": "_matchableCharactersByTier",
            "type": "t_mapping(t_uint8,t_struct(UintSet)66052_storage)",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\PvpArena.sol:116"
          },
          {
            "contract": "PvpArena",
            "label": "duelOffsetCost",
            "type": "t_uint256",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\PvpArena.sol:118"
          },
          {
            "contract": "PvpArena",
            "label": "pvpBotAddress",
            "type": "t_address_payable",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\PvpArena.sol:119"
          },
          {
            "contract": "PvpArena",
            "label": "specialWeaponRerollTimestamp",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\PvpArena.sol:122"
          },
          {
            "contract": "PvpArena",
            "label": "_ownerByCharacter",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\PvpArena.sol:123"
          }
        ],
        "types": {
          "t_contract(CryptoBlades)44564": {
            "label": "contract CryptoBlades"
          },
          "t_contract(Characters)40611": {
            "label": "contract Characters"
          },
          "t_contract(Weapons)58751": {
            "label": "contract Weapons"
          },
          "t_contract(Shields)51194": {
            "label": "contract Shields"
          },
          "t_contract(IERC20)65007": {
            "label": "contract IERC20"
          },
          "t_contract(IRandoms)44672": {
            "label": "contract IRandoms"
          },
          "t_int128": {
            "label": "int128"
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_struct(UintSet)66052_storage": {
            "label": "struct EnumerableSet.UintSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)65666_storage"
              }
            ]
          },
          "t_struct(Set)65666_storage": {
            "label": "struct EnumerableSet.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_mapping(t_uint256,t_struct(Fighter)21718_storage)": {
            "label": "mapping(uint256 => struct PvpArena.Fighter)"
          },
          "t_struct(Fighter)21718_storage": {
            "label": "struct PvpArena.Fighter",
            "members": [
              {
                "label": "characterID",
                "type": "t_uint256"
              },
              {
                "label": "weaponID",
                "type": "t_uint256"
              },
              {
                "label": "shieldID",
                "type": "t_uint256"
              },
              {
                "label": "wager",
                "type": "t_uint256"
              },
              {
                "label": "useShield",
                "type": "t_bool"
              }
            ]
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_uint256,t_struct(Match)21725_storage)": {
            "label": "mapping(uint256 => struct PvpArena.Match)"
          },
          "t_struct(Match)21725_storage": {
            "label": "struct PvpArena.Match",
            "members": [
              {
                "label": "attackerID",
                "type": "t_uint256"
              },
              {
                "label": "defenderID",
                "type": "t_uint256"
              },
              {
                "label": "createdAt",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_uint256,t_uint8)": {
            "label": "mapping(uint256 => uint8)"
          },
          "t_mapping(t_uint8,t_uint256)": {
            "label": "mapping(uint8 => uint256)"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_uint8,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(uint8 => uint256[])"
          },
          "t_mapping(t_uint8,t_struct(UintSet)66052_storage)": {
            "label": "mapping(uint8 => struct EnumerableSet.UintSet)"
          },
          "t_address_payable": {
            "label": "address payable"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)59198_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_struct(RoleData)59198_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_struct(AddressSet)63001_storage"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_struct(AddressSet)63001_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)62736_storage"
              }
            ]
          },
          "t_struct(Set)62736_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "83b01f3e4f244fbb40cf9fb593b7cee057f218917e9da2eadc7a30b90bdf0290": {
      "address": "0x35D873FbcF9a18A62ADb2Be01788FC49977b84cF",
      "txHash": "0x3dfd1f2c5bd8d4477d1c2b3595e4ba593c4b6de7009b0160e6fd1214297eebc2",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\proxy\\Initializable.sol:25"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\proxy\\Initializable.sol:30"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:31"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)59198_storage)",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\access\\AccessControlUpgradeable.sol:61"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\access\\AccessControlUpgradeable.sol:225"
          },
          {
            "contract": "Garrison",
            "label": "characters",
            "type": "t_contract(Characters)40611",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\Garrison.sol:20"
          },
          {
            "contract": "Garrison",
            "label": "supportedTokenTypes",
            "type": "t_struct(AddressSet)65931_storage",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\Garrison.sol:22"
          },
          {
            "contract": "Garrison",
            "label": "userGarrison",
            "type": "t_mapping(t_address,t_struct(UintSet)66052_storage)",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\Garrison.sol:24"
          },
          {
            "contract": "Garrison",
            "label": "characterOwner",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\Garrison.sol:25"
          },
          {
            "contract": "Garrison",
            "label": "allCharactersInGarrison",
            "type": "t_struct(UintSet)66052_storage",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\Garrison.sol:26"
          },
          {
            "contract": "Garrison",
            "label": "game",
            "type": "t_contract(CryptoBlades)44564",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\Garrison.sol:28"
          }
        ],
        "types": {
          "t_contract(Characters)40611": {
            "label": "contract Characters"
          },
          "t_struct(AddressSet)65931_storage": {
            "label": "struct EnumerableSet.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)65666_storage"
              }
            ]
          },
          "t_struct(Set)65666_storage": {
            "label": "struct EnumerableSet.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_address,t_struct(UintSet)66052_storage)": {
            "label": "mapping(address => struct EnumerableSet.UintSet)"
          },
          "t_address": {
            "label": "address"
          },
          "t_struct(UintSet)66052_storage": {
            "label": "struct EnumerableSet.UintSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)65666_storage"
              }
            ]
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)"
          },
          "t_contract(CryptoBlades)44564": {
            "label": "contract CryptoBlades"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)59198_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_struct(RoleData)59198_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_struct(AddressSet)63001_storage"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_struct(AddressSet)63001_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)62736_storage"
              }
            ]
          },
          "t_struct(Set)62736_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_bool": {
            "label": "bool"
          }
        }
      }
    },
    "107202679ee813fcc714720da6931877ef5ca2bc638a2c24e1b54cbe0c3246ec": {
      "address": "0xd7Eb9B6E316a88e77318Da524E923056592Cb8B3",
      "txHash": "0xc496bb1da59f9b362b5e71721e1ad1feaf9b6368ceda770c4e1ae20ee3c932df",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\proxy\\Initializable.sol:25"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\proxy\\Initializable.sol:30"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:31"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)59198_storage)",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\access\\AccessControlUpgradeable.sol:61"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\access\\AccessControlUpgradeable.sol:225"
          },
          {
            "contract": "BurningManager",
            "label": "characters",
            "type": "t_contract(Characters)40611",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\BurningManager.sol:18"
          },
          {
            "contract": "BurningManager",
            "label": "game",
            "type": "t_contract(CryptoBlades)44564",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\BurningManager.sol:19"
          },
          {
            "contract": "BurningManager",
            "label": "garrison",
            "type": "t_contract(Garrison)11962",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\BurningManager.sol:20"
          },
          {
            "contract": "BurningManager",
            "label": "userVars",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\BurningManager.sol:22"
          },
          {
            "contract": "BurningManager",
            "label": "vars",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\BurningManager.sol:25"
          },
          {
            "contract": "BurningManager",
            "label": "burnWeaponFee",
            "type": "t_int128",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\BurningManager.sol:29"
          },
          {
            "contract": "BurningManager",
            "label": "reforgeWeaponWithDustFee",
            "type": "t_int128",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\BurningManager.sol:30"
          },
          {
            "contract": "BurningManager",
            "label": "reforgeWeaponFee",
            "type": "t_int128",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\BurningManager.sol:31"
          },
          {
            "contract": "BurningManager",
            "label": "weapons",
            "type": "t_contract(Weapons)58751",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\BurningManager.sol:35"
          },
          {
            "contract": "BurningManager",
            "label": "priceOracleSkillPerUsd",
            "type": "t_contract(IPriceOracle)44653",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\BurningManager.sol:36"
          }
        ],
        "types": {
          "t_contract(Characters)40611": {
            "label": "contract Characters"
          },
          "t_contract(CryptoBlades)44564": {
            "label": "contract CryptoBlades"
          },
          "t_contract(Garrison)11962": {
            "label": "contract Garrison"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(address => mapping(uint256 => uint256))"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_int128": {
            "label": "int128"
          },
          "t_contract(Weapons)58751": {
            "label": "contract Weapons"
          },
          "t_contract(IPriceOracle)44653": {
            "label": "contract IPriceOracle"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)59198_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)59198_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_struct(AddressSet)63001_storage"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_struct(AddressSet)63001_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)62736_storage"
              }
            ]
          },
          "t_struct(Set)62736_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_bool": {
            "label": "bool"
          }
        }
      }
    },
    "b497afaffd0c08f17fa9f183e5459862b55f51671b38722f1f72d541275b00b1": {
      "address": "0x26362Fa1a24f2b8eA3498863A3700605C16A9D9D",
      "txHash": "0x7f39ba973e6f11e52b48654919b641994e3589424095daee3adbbccc61ea90ee",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\proxy\\Initializable.sol:25"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\proxy\\Initializable.sol:30"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:31"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)59198_storage)",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\access\\AccessControlUpgradeable.sol:61"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\access\\AccessControlUpgradeable.sol:225"
          },
          {
            "contract": "SafeRandoms",
            "label": "currentSeedIndex",
            "type": "t_uint256",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\SafeRandoms.sol:73"
          },
          {
            "contract": "SafeRandoms",
            "label": "seedIndexBlockNumber",
            "type": "t_uint256",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\SafeRandoms.sol:74"
          },
          {
            "contract": "SafeRandoms",
            "label": "firstRequestBlockNumber",
            "type": "t_uint256",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\SafeRandoms.sol:75"
          },
          {
            "contract": "SafeRandoms",
            "label": "seedHashes",
            "type": "t_mapping(t_uint256,t_bytes32)",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\SafeRandoms.sol:76"
          },
          {
            "contract": "SafeRandoms",
            "label": "singleSeedRequests",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\SafeRandoms.sol:79"
          },
          {
            "contract": "SafeRandoms",
            "label": "singleSeedSalts",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\SafeRandoms.sol:80"
          },
          {
            "contract": "SafeRandoms",
            "label": "queuedSeedRequests",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_array(t_uint256)dyn_storage))",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\SafeRandoms.sol:81"
          },
          {
            "contract": "SafeRandoms",
            "label": "publicResolutionLimited",
            "type": "t_bool",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\SafeRandoms.sol:83"
          },
          {
            "contract": "SafeRandoms",
            "label": "publicResolutionBlocks",
            "type": "t_uint256",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\SafeRandoms.sol:84"
          },
          {
            "contract": "SafeRandoms",
            "label": "emitResolutionEvent",
            "type": "t_bool",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\SafeRandoms.sol:86"
          },
          {
            "contract": "SafeRandoms",
            "label": "emitRequestEvent",
            "type": "t_bool",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\SafeRandoms.sol:87"
          },
          {
            "contract": "SafeRandoms",
            "label": "emitPopEvent",
            "type": "t_bool",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\SafeRandoms.sol:88"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_uint256,t_bytes32)": {
            "label": "mapping(uint256 => bytes32)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(address => mapping(uint256 => uint256))"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_array(t_uint256)dyn_storage))": {
            "label": "mapping(address => mapping(uint256 => uint256[]))"
          },
          "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(uint256 => uint256[])"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)59198_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_struct(RoleData)59198_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_struct(AddressSet)63001_storage"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_struct(AddressSet)63001_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)62736_storage"
              }
            ]
          },
          "t_struct(Set)62736_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "ad41f1ca1fa77c142989ecc17ec4e913ab51adee45e4c7a4bdc19b95e8bf68c9": {
      "address": "0x651CC58453588daD4be6b7C1b949a68089E1C91c",
      "txHash": "0x0859991b8eec822de237c0859c57791c69ae4b12681b337400ebdd1024c4fa80",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\proxy\\Initializable.sol:25"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\proxy\\Initializable.sol:30"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:31"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)59198_storage)",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\access\\AccessControlUpgradeable.sol:61"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\access\\AccessControlUpgradeable.sol:225"
          },
          {
            "contract": "PartnerVault",
            "label": "nfts",
            "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\PartnerVault.sol:21"
          },
          {
            "contract": "PartnerVault",
            "label": "currencies",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\PartnerVault.sol:22"
          },
          {
            "contract": "PartnerVault",
            "label": "shownNfts",
            "type": "t_mapping(t_address,t_struct(UintSet)66052_storage)",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\PartnerVault.sol:23"
          }
        ],
        "types": {
          "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(address => uint256[])"
          },
          "t_address": {
            "label": "address"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_struct(UintSet)66052_storage)": {
            "label": "mapping(address => struct EnumerableSet.UintSet)"
          },
          "t_struct(UintSet)66052_storage": {
            "label": "struct EnumerableSet.UintSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)65666_storage"
              }
            ]
          },
          "t_struct(Set)65666_storage": {
            "label": "struct EnumerableSet.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)59198_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_struct(RoleData)59198_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_struct(AddressSet)63001_storage"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_struct(AddressSet)63001_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)62736_storage"
              }
            ]
          },
          "t_struct(Set)62736_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_bool": {
            "label": "bool"
          }
        }
      }
    },
    "1d9fc37a7f3a1d1c6f24cfae5e1f132e09942f0bb26e16a1c4e707a95e4e3a1c": {
      "address": "0x83F73Af8C3F2c377eeBdE08Bfc1C61dEAabc0A4c",
      "txHash": "0x5d0d08d3f3df1f79b5ea325922bce3f22a37995c61e013c8c108e7f527e127fd",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\proxy\\Initializable.sol:25"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\proxy\\Initializable.sol:30"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:31"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)59198_storage)",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\access\\AccessControlUpgradeable.sol:61"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\access\\AccessControlUpgradeable.sol:225"
          },
          {
            "contract": "SimpleQuests",
            "label": "characters",
            "type": "t_contract(Characters)40611",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\SimpleQuests.sol:41"
          },
          {
            "contract": "SimpleQuests",
            "label": "weapons",
            "type": "t_contract(Weapons)58751",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\SimpleQuests.sol:42"
          },
          {
            "contract": "SimpleQuests",
            "label": "junk",
            "type": "t_contract(Junk)45145",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\SimpleQuests.sol:43"
          },
          {
            "contract": "SimpleQuests",
            "label": "trinket",
            "type": "t_contract(RaidTrinket)45762",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\SimpleQuests.sol:44"
          },
          {
            "contract": "SimpleQuests",
            "label": "shields",
            "type": "t_contract(Shields)51194",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\SimpleQuests.sol:45"
          },
          {
            "contract": "SimpleQuests",
            "label": "burningManager",
            "type": "t_contract(BurningManager)2926",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\SimpleQuests.sol:46"
          },
          {
            "contract": "SimpleQuests",
            "label": "safeRandoms",
            "type": "t_contract(SafeRandoms)30191",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\SimpleQuests.sol:47"
          },
          {
            "contract": "SimpleQuests",
            "label": "partnerVault",
            "type": "t_contract(PartnerVault)21426",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\SimpleQuests.sol:48"
          },
          {
            "contract": "SimpleQuests",
            "label": "nextQuestID",
            "type": "t_uint256",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\SimpleQuests.sol:92"
          },
          {
            "contract": "SimpleQuests",
            "label": "nextRewardID",
            "type": "t_uint256",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\SimpleQuests.sol:93"
          },
          {
            "contract": "SimpleQuests",
            "label": "questTemplates",
            "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\SimpleQuests.sol:95"
          },
          {
            "contract": "SimpleQuests",
            "label": "quests",
            "type": "t_mapping(t_uint256,t_struct(Quest)30642_storage)",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\SimpleQuests.sol:96"
          },
          {
            "contract": "SimpleQuests",
            "label": "questSupplies",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\SimpleQuests.sol:97"
          },
          {
            "contract": "SimpleQuests",
            "label": "questDeadlines",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\SimpleQuests.sol:98"
          },
          {
            "contract": "SimpleQuests",
            "label": "questIndexes",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\SimpleQuests.sol:99"
          },
          {
            "contract": "SimpleQuests",
            "label": "characterQuest",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\SimpleQuests.sol:100"
          },
          {
            "contract": "SimpleQuests",
            "label": "tierChances",
            "type": "t_mapping(t_uint256,t_array(t_uint256)4_storage)",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\SimpleQuests.sol:101"
          },
          {
            "contract": "SimpleQuests",
            "label": "vars",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\SimpleQuests.sol:102"
          },
          {
            "contract": "SimpleQuests",
            "label": "lastFreeSkipUsage",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\SimpleQuests.sol:103"
          },
          {
            "contract": "SimpleQuests",
            "label": "weeklyCompletions",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\SimpleQuests.sol:104"
          },
          {
            "contract": "SimpleQuests",
            "label": "weeklyRewardClaimed",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\SimpleQuests.sol:105"
          },
          {
            "contract": "SimpleQuests",
            "label": "rewards",
            "type": "t_mapping(t_uint256,t_struct(Reward)30655_storage)",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\SimpleQuests.sol:106"
          },
          {
            "contract": "SimpleQuests",
            "label": "weeklyRewards",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\SimpleQuests.sol:107"
          },
          {
            "contract": "SimpleQuests",
            "label": "weeklyCompletionsGoal",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\SimpleQuests.sol:108"
          },
          {
            "contract": "SimpleQuests",
            "label": "walletQuestProgress",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\SimpleQuests.sol:109"
          }
        ],
        "types": {
          "t_contract(Characters)40611": {
            "label": "contract Characters"
          },
          "t_contract(Weapons)58751": {
            "label": "contract Weapons"
          },
          "t_contract(Junk)45145": {
            "label": "contract Junk"
          },
          "t_contract(RaidTrinket)45762": {
            "label": "contract RaidTrinket"
          },
          "t_contract(Shields)51194": {
            "label": "contract Shields"
          },
          "t_contract(BurningManager)2926": {
            "label": "contract BurningManager"
          },
          "t_contract(SafeRandoms)30191": {
            "label": "contract SafeRandoms"
          },
          "t_contract(PartnerVault)21426": {
            "label": "contract PartnerVault"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(uint256 => uint256[])"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_uint256,t_struct(Quest)30642_storage)": {
            "label": "mapping(uint256 => struct SimpleQuests.Quest)"
          },
          "t_struct(Quest)30642_storage": {
            "label": "struct SimpleQuests.Quest",
            "members": [
              {
                "label": "id",
                "type": "t_uint256"
              },
              {
                "label": "tier",
                "type": "t_enum(Rarity)30675"
              },
              {
                "label": "requirementType",
                "type": "t_enum(ItemType)30669"
              },
              {
                "label": "requirementRarity",
                "type": "t_uint256"
              },
              {
                "label": "requirementAmount",
                "type": "t_uint256"
              },
              {
                "label": "requirementExternalAddress",
                "type": "t_address"
              },
              {
                "label": "rewardType",
                "type": "t_enum(ItemType)30669"
              },
              {
                "label": "rewardRarity",
                "type": "t_uint256"
              },
              {
                "label": "rewardAmount",
                "type": "t_uint256"
              },
              {
                "label": "rewardExternalAddress",
                "type": "t_address"
              },
              {
                "label": "reputationAmount",
                "type": "t_uint256"
              }
            ]
          },
          "t_enum(Rarity)30675": {
            "label": "enum SimpleQuests.Rarity",
            "members": [
              "COMMON",
              "UNCOMMON",
              "RARE",
              "EPIC",
              "LEGENDARY"
            ]
          },
          "t_enum(ItemType)30669": {
            "label": "enum SimpleQuests.ItemType",
            "members": [
              "NONE",
              "WEAPON",
              "JUNK",
              "DUST",
              "TRINKET",
              "SHIELD",
              "STAMINA",
              "SOUL",
              "RAID",
              "EXPERIENCE",
              "EXTERNAL",
              "EXTERNAL_HOLD",
              "CHARACTER"
            ]
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_uint256,t_array(t_uint256)4_storage)": {
            "label": "mapping(uint256 => uint256[4])"
          },
          "t_array(t_uint256)4_storage": {
            "label": "uint256[4]"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(address => mapping(uint256 => uint256))"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_bool))": {
            "label": "mapping(address => mapping(uint256 => bool))"
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_uint256,t_struct(Reward)30655_storage)": {
            "label": "mapping(uint256 => struct SimpleQuests.Reward)"
          },
          "t_struct(Reward)30655_storage": {
            "label": "struct SimpleQuests.Reward",
            "members": [
              {
                "label": "id",
                "type": "t_uint256"
              },
              {
                "label": "rewardType",
                "type": "t_enum(ItemType)30669"
              },
              {
                "label": "rewardRarity",
                "type": "t_uint256"
              },
              {
                "label": "rewardAmount",
                "type": "t_uint256"
              },
              {
                "label": "rewardExternalAddress",
                "type": "t_address"
              },
              {
                "label": "reputationAmount",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_bytes32,t_struct(RoleData)59198_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)59198_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_struct(AddressSet)63001_storage"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_struct(AddressSet)63001_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)62736_storage"
              }
            ]
          },
          "t_struct(Set)62736_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "6545ce5a56a8a4ae04447e982e90b1bd25f7dd13512a35d3eaa959e4b4440319": {
      "address": "0x3b6b9C7ecd830cCb6492D3c097DE9770a1035c74",
      "txHash": "0x27d3beb09c6acd8794929e35ae7b5e88694eef41fd0c107e3db57e34fcda5bc8",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\proxy\\Initializable.sol:25"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\proxy\\Initializable.sol:30"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:31"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)59198_storage)",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\access\\AccessControlUpgradeable.sol:61"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\access\\AccessControlUpgradeable.sol:225"
          },
          {
            "contract": "SpecialWeaponsManager",
            "label": "promos",
            "type": "t_contract(Promos)21671",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\SpecialWeaponsManager.sol:20"
          },
          {
            "contract": "SpecialWeaponsManager",
            "label": "weapons",
            "type": "t_contract(Weapons)58751",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\SpecialWeaponsManager.sol:21"
          },
          {
            "contract": "SpecialWeaponsManager",
            "label": "safeRandoms",
            "type": "t_contract(SafeRandoms)30191",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\SpecialWeaponsManager.sol:22"
          },
          {
            "contract": "SpecialWeaponsManager",
            "label": "game",
            "type": "t_contract(CryptoBlades)44564",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\SpecialWeaponsManager.sol:23"
          },
          {
            "contract": "SpecialWeaponsManager",
            "label": "priceOracleSkillPerUsd",
            "type": "t_contract(IPriceOracle)44653",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\SpecialWeaponsManager.sol:24"
          },
          {
            "contract": "SpecialWeaponsManager",
            "label": "userEventShardSupply",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\SpecialWeaponsManager.sol:34"
          },
          {
            "contract": "SpecialWeaponsManager",
            "label": "vars",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\SpecialWeaponsManager.sol:35"
          },
          {
            "contract": "SpecialWeaponsManager",
            "label": "eventCount",
            "type": "t_uint256",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\SpecialWeaponsManager.sol:44"
          },
          {
            "contract": "SpecialWeaponsManager",
            "label": "eventInfo",
            "type": "t_mapping(t_uint256,t_struct(EventInfo)34126_storage)",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\SpecialWeaponsManager.sol:46"
          },
          {
            "contract": "SpecialWeaponsManager",
            "label": "userForgedAtEvent",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\SpecialWeaponsManager.sol:47"
          },
          {
            "contract": "SpecialWeaponsManager",
            "label": "userOrderOptionForEvent",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\SpecialWeaponsManager.sol:48"
          },
          {
            "contract": "SpecialWeaponsManager",
            "label": "userStakedSkill",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\SpecialWeaponsManager.sol:49"
          },
          {
            "contract": "SpecialWeaponsManager",
            "label": "userStakedSkillUpdatedTimestamp",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\SpecialWeaponsManager.sol:50"
          },
          {
            "contract": "SpecialWeaponsManager",
            "label": "userSkillStakingShardsRewards",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\SpecialWeaponsManager.sol:51"
          },
          {
            "contract": "SpecialWeaponsManager",
            "label": "specialWeaponArt",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\SpecialWeaponsManager.sol:52"
          },
          {
            "contract": "SpecialWeaponsManager",
            "label": "specialWeaponDetails",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\SpecialWeaponsManager.sol:53"
          },
          {
            "contract": "SpecialWeaponsManager",
            "label": "specialWeaponWebsite",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\SpecialWeaponsManager.sol:54"
          },
          {
            "contract": "SpecialWeaponsManager",
            "label": "specialWeaponNote",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\SpecialWeaponsManager.sol:55"
          }
        ],
        "types": {
          "t_contract(Promos)21671": {
            "label": "contract Promos"
          },
          "t_contract(Weapons)58751": {
            "label": "contract Weapons"
          },
          "t_contract(SafeRandoms)30191": {
            "label": "contract SafeRandoms"
          },
          "t_contract(CryptoBlades)44564": {
            "label": "contract CryptoBlades"
          },
          "t_contract(IPriceOracle)44653": {
            "label": "contract IPriceOracle"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(address => mapping(uint256 => uint256))"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_uint256,t_struct(EventInfo)34126_storage)": {
            "label": "mapping(uint256 => struct SpecialWeaponsManager.EventInfo)"
          },
          "t_struct(EventInfo)34126_storage": {
            "label": "struct SpecialWeaponsManager.EventInfo",
            "members": [
              {
                "label": "name",
                "type": "t_string_storage"
              },
              {
                "label": "weaponElement",
                "type": "t_uint8"
              },
              {
                "label": "endTime",
                "type": "t_uint256"
              },
              {
                "label": "supply",
                "type": "t_uint256"
              },
              {
                "label": "orderedCount",
                "type": "t_uint256"
              }
            ]
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_bool))": {
            "label": "mapping(address => mapping(uint256 => bool))"
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_uint256,t_string_storage)": {
            "label": "mapping(uint256 => string)"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)59198_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)59198_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_struct(AddressSet)63001_storage"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_struct(AddressSet)63001_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)62736_storage"
              }
            ]
          },
          "t_struct(Set)62736_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "ea94afb1402d83c6df33c45fbe8ac44b7a4e5a88813784c87ec5b104a356782d": {
      "address": "0xb5056FD4c7103a84B1FF31edE019D35a45C58234",
      "txHash": "0x70e6e9e6f6989c1cb8226e465813d5e4f8241116912c2d11e4cb1862aea45cf8",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\proxy\\Initializable.sol:25"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\proxy\\Initializable.sol:30"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:31"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)59198_storage)",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\access\\AccessControlUpgradeable.sol:61"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\access\\AccessControlUpgradeable.sol:225"
          },
          {
            "contract": "PartnerGiveaways",
            "label": "vars",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\partner-giveaways\\PartnerGiveaways.sol:13"
          },
          {
            "contract": "PartnerGiveaways",
            "label": "specialWeaponsManager",
            "type": "t_contract(SpecialWeaponsManager)35873",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\partner-giveaways\\PartnerGiveaways.sol:16"
          },
          {
            "contract": "PartnerGiveaways",
            "label": "userClaimedAtGiveaway",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\partner-giveaways\\PartnerGiveaways.sol:18"
          },
          {
            "contract": "PartnerGiveaways",
            "label": "nftClaimedAtGiveaway",
            "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_bool))",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\partner-giveaways\\PartnerGiveaways.sol:19"
          },
          {
            "contract": "PartnerGiveaways",
            "label": "giveawayIdToAddress",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\partner-giveaways\\PartnerGiveaways.sol:21"
          },
          {
            "contract": "PartnerGiveaways",
            "label": "giveawayIdToSpecialEventId",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\partner-giveaways\\PartnerGiveaways.sol:22"
          },
          {
            "contract": "PartnerGiveaways",
            "label": "giveawayEndTime",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\partner-giveaways\\PartnerGiveaways.sol:23"
          },
          {
            "contract": "PartnerGiveaways",
            "label": "nextGiveawayId",
            "type": "t_uint256",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\partner-giveaways\\PartnerGiveaways.sol:25"
          }
        ],
        "types": {
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_contract(SpecialWeaponsManager)35873": {
            "label": "contract SpecialWeaponsManager"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_bool))": {
            "label": "mapping(address => mapping(uint256 => bool))"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_uint256,t_mapping(t_uint256,t_bool))": {
            "label": "mapping(uint256 => mapping(uint256 => bool))"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)59198_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)59198_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_struct(AddressSet)63001_storage"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_struct(AddressSet)63001_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)62736_storage"
              }
            ]
          },
          "t_struct(Set)62736_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "4b0b8440157c24eb3d763e22b0e1998921bd2da9505a502196dfa423f762dbcc": {
      "address": "0x2c1B9b28ACaC3a259b21B41F93b160AED22195DC",
      "txHash": "0x9ff356c27a1ac6ac0097a2d3a766036e34041633e569e26d295a8ad1e0f32456",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\proxy\\Initializable.sol:25"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\proxy\\Initializable.sol:30"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:31"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)59198_storage)",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\access\\AccessControlUpgradeable.sol:61"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\access\\AccessControlUpgradeable.sol:225"
          },
          {
            "contract": "WeaponBridgeProxyContract",
            "label": "weapons",
            "type": "t_contract(Weapons)58751",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\WeaponBridgeProxyContract.sol:15"
          },
          {
            "contract": "WeaponBridgeProxyContract",
            "label": "weaponCosmetics",
            "type": "t_contract(WeaponCosmetics)38304",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\WeaponBridgeProxyContract.sol:16"
          },
          {
            "contract": "WeaponBridgeProxyContract",
            "label": "weaponRenameTagConsumables",
            "type": "t_contract(WeaponRenameTagConsumables)38496",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\WeaponBridgeProxyContract.sol:17"
          },
          {
            "contract": "WeaponBridgeProxyContract",
            "label": "nftStorageAddress",
            "type": "t_address",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\WeaponBridgeProxyContract.sol:18"
          },
          {
            "contract": "WeaponBridgeProxyContract",
            "label": "enabled",
            "type": "t_bool",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\WeaponBridgeProxyContract.sol:19"
          }
        ],
        "types": {
          "t_contract(Weapons)58751": {
            "label": "contract Weapons"
          },
          "t_contract(WeaponCosmetics)38304": {
            "label": "contract WeaponCosmetics"
          },
          "t_contract(WeaponRenameTagConsumables)38496": {
            "label": "contract WeaponRenameTagConsumables"
          },
          "t_address": {
            "label": "address"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)59198_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)59198_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_struct(AddressSet)63001_storage"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_struct(AddressSet)63001_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)62736_storage"
              }
            ]
          },
          "t_struct(Set)62736_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "984a3c912b9d7692f1669a9a6c5b98717eecc28d51c0fb18644642eccab5f9da": {
      "address": "0xa78eC425D46Eb7Eee60c4858699c487225939015",
      "txHash": "0x8f96381d29c83e890ead18289ff5ee90bf2eb98d20ff2dfc1cdaa146552ebd4f",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\proxy\\Initializable.sol:25"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\proxy\\Initializable.sol:30"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:31"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)59198_storage)",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\access\\AccessControlUpgradeable.sol:61"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\access\\AccessControlUpgradeable.sol:225"
          },
          {
            "contract": "CharactersBridgeProxyContract",
            "label": "characters",
            "type": "t_contract(Characters)40611",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\CharactersBridgeProxyContract.sol:16"
          },
          {
            "contract": "CharactersBridgeProxyContract",
            "label": "characterCosmetics",
            "type": "t_contract(CharacterCosmetics)8069",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\CharactersBridgeProxyContract.sol:17"
          },
          {
            "contract": "CharactersBridgeProxyContract",
            "label": "characterRenameTagConsumables",
            "type": "t_contract(CharacterRenameTagConsumables)8501",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\CharactersBridgeProxyContract.sol:18"
          },
          {
            "contract": "CharactersBridgeProxyContract",
            "label": "nftStorageAddress",
            "type": "t_address",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\CharactersBridgeProxyContract.sol:19"
          },
          {
            "contract": "CharactersBridgeProxyContract",
            "label": "enabled",
            "type": "t_bool",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\CharactersBridgeProxyContract.sol:20"
          },
          {
            "contract": "CharactersBridgeProxyContract",
            "label": "giveawayGen2Enabled",
            "type": "t_bool",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\CharactersBridgeProxyContract.sol:21"
          },
          {
            "contract": "CharactersBridgeProxyContract",
            "label": "promos",
            "type": "t_contract(Promos)21671",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\CharactersBridgeProxyContract.sol:26"
          }
        ],
        "types": {
          "t_contract(Characters)40611": {
            "label": "contract Characters"
          },
          "t_contract(CharacterCosmetics)8069": {
            "label": "contract CharacterCosmetics"
          },
          "t_contract(CharacterRenameTagConsumables)8501": {
            "label": "contract CharacterRenameTagConsumables"
          },
          "t_address": {
            "label": "address"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_contract(Promos)21671": {
            "label": "contract Promos"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)59198_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)59198_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_struct(AddressSet)63001_storage"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_struct(AddressSet)63001_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)62736_storage"
              }
            ]
          },
          "t_struct(Set)62736_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "f80c5afe088a939b19a95dac1c2202c479049e112c5b96cda0376d1ec9de0328": {
      "address": "0xfc91f61b0629a8E677bC6a86A23c82331e40779a",
      "txHash": "0x98d79b5767fdaf11f5685fef16585d5fbdc6241e8b0c5a56bd604a542aa2df3c",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\proxy\\Initializable.sol:25"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\proxy\\Initializable.sol:30"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:31"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)59198_storage)",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\access\\AccessControlUpgradeable.sol:61"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\access\\AccessControlUpgradeable.sol:225"
          },
          {
            "contract": "ShieldBridgeProxyContract",
            "label": "shields",
            "type": "t_contract(Shields)51194",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\ShieldBridgeProxyContract.sol:13"
          },
          {
            "contract": "ShieldBridgeProxyContract",
            "label": "nftStorageAddress",
            "type": "t_address",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\ShieldBridgeProxyContract.sol:14"
          },
          {
            "contract": "ShieldBridgeProxyContract",
            "label": "enabled",
            "type": "t_bool",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\ShieldBridgeProxyContract.sol:15"
          }
        ],
        "types": {
          "t_contract(Shields)51194": {
            "label": "contract Shields"
          },
          "t_address": {
            "label": "address"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)59198_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)59198_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_struct(AddressSet)63001_storage"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_struct(AddressSet)63001_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)62736_storage"
              }
            ]
          },
          "t_struct(Set)62736_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "3de7e79b8e5b62f548437fd2b9dda17aa5b206eb8758d21c764593678c145359": {
      "address": "0x65d564b1F20e40b81Be21d08B88566319f9B1316",
      "txHash": "0x4c65272b05deb97da91de5dae61bff3d67dc5b882e50b8e8348a4f53f0123013",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\proxy\\Initializable.sol:25"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\proxy\\Initializable.sol:30"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:31"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)59198_storage)",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\access\\AccessControlUpgradeable.sol:61"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\access\\AccessControlUpgradeable.sol:225"
          },
          {
            "contract": "PvpRankings",
            "label": "game",
            "type": "t_contract(CryptoBlades)44564",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\PvpRankings.sol:19"
          },
          {
            "contract": "PvpRankings",
            "label": "characters",
            "type": "t_contract(Characters)40611",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\PvpRankings.sol:20"
          },
          {
            "contract": "PvpRankings",
            "label": "skillToken",
            "type": "t_contract(IERC20)65007",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\PvpRankings.sol:21"
          },
          {
            "contract": "PvpRankings",
            "label": "pvpcore",
            "type": "t_contract(PvpCore)28120",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\PvpRankings.sol:22"
          },
          {
            "contract": "PvpRankings",
            "label": "_rankingsPoolTaxPercent",
            "type": "t_uint8",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\PvpRankings.sol:25"
          },
          {
            "contract": "PvpRankings",
            "label": "winningPoints",
            "type": "t_uint8",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\PvpRankings.sol:27"
          },
          {
            "contract": "PvpRankings",
            "label": "losingPoints",
            "type": "t_uint8",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\PvpRankings.sol:29"
          },
          {
            "contract": "PvpRankings",
            "label": "_maxTopCharactersPerTier",
            "type": "t_uint8",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\PvpRankings.sol:31"
          },
          {
            "contract": "PvpRankings",
            "label": "currentRankedSeason",
            "type": "t_uint256",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\PvpRankings.sol:33"
          },
          {
            "contract": "PvpRankings",
            "label": "seasonStartedAt",
            "type": "t_uint256",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\PvpRankings.sol:35"
          },
          {
            "contract": "PvpRankings",
            "label": "seasonDuration",
            "type": "t_uint256",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\PvpRankings.sol:37"
          },
          {
            "contract": "PvpRankings",
            "label": "gameCofferTaxDue",
            "type": "t_uint256",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\PvpRankings.sol:39"
          },
          {
            "contract": "PvpRankings",
            "label": "prizePercentages",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\PvpRankings.sol:41"
          },
          {
            "contract": "PvpRankings",
            "label": "seasonByCharacter",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\PvpRankings.sol:44"
          },
          {
            "contract": "PvpRankings",
            "label": "rankingPointsByCharacter",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\PvpRankings.sol:46"
          },
          {
            "contract": "PvpRankings",
            "label": "rankingsPoolByTier",
            "type": "t_mapping(t_uint8,t_uint256)",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\PvpRankings.sol:48"
          },
          {
            "contract": "PvpRankings",
            "label": "_rankingRewardsByPlayer",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\PvpRankings.sol:50"
          },
          {
            "contract": "PvpRankings",
            "label": "_topRankingCharactersByTier",
            "type": "t_mapping(t_uint8,t_array(t_uint256)dyn_storage)",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\PvpRankings.sol:52"
          },
          {
            "contract": "PvpRankings",
            "label": "_ownerByCharacter",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\PvpRankings.sol:54"
          }
        ],
        "types": {
          "t_contract(CryptoBlades)44564": {
            "label": "contract CryptoBlades"
          },
          "t_contract(Characters)40611": {
            "label": "contract Characters"
          },
          "t_contract(IERC20)65007": {
            "label": "contract IERC20"
          },
          "t_contract(PvpCore)28120": {
            "label": "contract PvpCore"
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_uint8,t_uint256)": {
            "label": "mapping(uint8 => uint256)"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_uint8,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(uint8 => uint256[])"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)59198_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)59198_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_struct(AddressSet)63001_storage"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_struct(AddressSet)63001_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)62736_storage"
              }
            ]
          },
          "t_struct(Set)62736_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_bool": {
            "label": "bool"
          }
        }
      }
    },
    "0745ef7816c22285a0ff636cd311cf48f4595ccfa6c8d75762d3d48a77b0e74d": {
      "address": "0x13B287CF4D1003d91D7cF847CB98275f08785F43",
      "txHash": "0xbba3477d69c9fb713d1228d8ad242e418939215117640f52e5ced428299968aa",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\proxy\\Initializable.sol:25"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\proxy\\Initializable.sol:30"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:31"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)59198_storage)",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\access\\AccessControlUpgradeable.sol:61"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\access\\AccessControlUpgradeable.sol:225"
          },
          {
            "contract": "PvpCore",
            "label": "game",
            "type": "t_contract(CryptoBlades)44564",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\PvpCore.sol:57"
          },
          {
            "contract": "PvpCore",
            "label": "characters",
            "type": "t_contract(Characters)40611",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\PvpCore.sol:58"
          },
          {
            "contract": "PvpCore",
            "label": "weapons",
            "type": "t_contract(Weapons)58751",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\PvpCore.sol:59"
          },
          {
            "contract": "PvpCore",
            "label": "shields",
            "type": "t_contract(Shields)51194",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\PvpCore.sol:60"
          },
          {
            "contract": "PvpCore",
            "label": "skillToken",
            "type": "t_contract(IERC20)65007",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\PvpCore.sol:61"
          },
          {
            "contract": "PvpCore",
            "label": "randoms",
            "type": "t_contract(IRandoms)44672",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\PvpCore.sol:62"
          },
          {
            "contract": "PvpCore",
            "label": "pvprankings",
            "type": "t_contract(PvpRankings)29450",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\PvpCore.sol:63"
          },
          {
            "contract": "PvpCore",
            "label": "_baseWagerUSD",
            "type": "t_int128",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\PvpCore.sol:66"
          },
          {
            "contract": "PvpCore",
            "label": "_tierWagerUSD",
            "type": "t_int128",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\PvpCore.sol:68"
          },
          {
            "contract": "PvpCore",
            "label": "wageringFactor",
            "type": "t_uint8",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\PvpCore.sol:70"
          },
          {
            "contract": "PvpCore",
            "label": "reRollFeePercent",
            "type": "t_uint256",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\PvpCore.sol:72"
          },
          {
            "contract": "PvpCore",
            "label": "withdrawFeePercent",
            "type": "t_uint256",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\PvpCore.sol:74"
          },
          {
            "contract": "PvpCore",
            "label": "decisionSeconds",
            "type": "t_uint256",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\PvpCore.sol:76"
          },
          {
            "contract": "PvpCore",
            "label": "arenaAccess",
            "type": "t_uint256",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\PvpCore.sol:78"
          },
          {
            "contract": "PvpCore",
            "label": "duelOffsetCost",
            "type": "t_uint256",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\PvpCore.sol:80"
          },
          {
            "contract": "PvpCore",
            "label": "pvpBotAddress",
            "type": "t_address_payable",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\PvpCore.sol:82"
          },
          {
            "contract": "PvpCore",
            "label": "_duelQueue",
            "type": "t_struct(UintSet)66052_storage",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\PvpCore.sol:84"
          },
          {
            "contract": "PvpCore",
            "label": "fighterByCharacter",
            "type": "t_mapping(t_uint256,t_struct(Fighter)25385_storage)",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\PvpCore.sol:87"
          },
          {
            "contract": "PvpCore",
            "label": "matchByFinder",
            "type": "t_mapping(t_uint256,t_struct(Match)25392_storage)",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\PvpCore.sol:89"
          },
          {
            "contract": "PvpCore",
            "label": "isCharacterInArena",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\PvpCore.sol:91"
          },
          {
            "contract": "PvpCore",
            "label": "isWeaponInArena",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\PvpCore.sol:93"
          },
          {
            "contract": "PvpCore",
            "label": "isShieldInArena",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\PvpCore.sol:95"
          },
          {
            "contract": "PvpCore",
            "label": "isDefending",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\PvpCore.sol:97"
          },
          {
            "contract": "PvpCore",
            "label": "finderByOpponent",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\PvpCore.sol:99"
          },
          {
            "contract": "PvpCore",
            "label": "previousTierByCharacter",
            "type": "t_mapping(t_uint256,t_uint8)",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\PvpCore.sol:101"
          },
          {
            "contract": "PvpCore",
            "label": "excessWagerByCharacter",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\PvpCore.sol:103"
          },
          {
            "contract": "PvpCore",
            "label": "_matchableCharactersByTier",
            "type": "t_mapping(t_uint8,t_struct(UintSet)66052_storage)",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\PvpCore.sol:105"
          },
          {
            "contract": "PvpCore",
            "label": "specialWeaponRerollTimestamp",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\PvpCore.sol:107"
          },
          {
            "contract": "PvpCore",
            "label": "_ownerByCharacter",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\PvpCore.sol:109"
          }
        ],
        "types": {
          "t_contract(CryptoBlades)44564": {
            "label": "contract CryptoBlades"
          },
          "t_contract(Characters)40611": {
            "label": "contract Characters"
          },
          "t_contract(Weapons)58751": {
            "label": "contract Weapons"
          },
          "t_contract(Shields)51194": {
            "label": "contract Shields"
          },
          "t_contract(IERC20)65007": {
            "label": "contract IERC20"
          },
          "t_contract(IRandoms)44672": {
            "label": "contract IRandoms"
          },
          "t_contract(PvpRankings)29450": {
            "label": "contract PvpRankings"
          },
          "t_int128": {
            "label": "int128"
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_address_payable": {
            "label": "address payable"
          },
          "t_struct(UintSet)66052_storage": {
            "label": "struct EnumerableSet.UintSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)65666_storage"
              }
            ]
          },
          "t_struct(Set)65666_storage": {
            "label": "struct EnumerableSet.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_mapping(t_uint256,t_struct(Fighter)25385_storage)": {
            "label": "mapping(uint256 => struct PvpCore.Fighter)"
          },
          "t_struct(Fighter)25385_storage": {
            "label": "struct PvpCore.Fighter",
            "members": [
              {
                "label": "characterID",
                "type": "t_uint256"
              },
              {
                "label": "weaponID",
                "type": "t_uint256"
              },
              {
                "label": "shieldID",
                "type": "t_uint256"
              },
              {
                "label": "wager",
                "type": "t_uint256"
              },
              {
                "label": "useShield",
                "type": "t_bool"
              }
            ]
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_uint256,t_struct(Match)25392_storage)": {
            "label": "mapping(uint256 => struct PvpCore.Match)"
          },
          "t_struct(Match)25392_storage": {
            "label": "struct PvpCore.Match",
            "members": [
              {
                "label": "attackerID",
                "type": "t_uint256"
              },
              {
                "label": "defenderID",
                "type": "t_uint256"
              },
              {
                "label": "createdAt",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_uint256,t_uint8)": {
            "label": "mapping(uint256 => uint8)"
          },
          "t_mapping(t_uint8,t_struct(UintSet)66052_storage)": {
            "label": "mapping(uint8 => struct EnumerableSet.UintSet)"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)59198_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_struct(RoleData)59198_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_struct(AddressSet)63001_storage"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_struct(AddressSet)63001_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)62736_storage"
              }
            ]
          },
          "t_struct(Set)62736_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "bc1a08f6dfb6a8ac8a71c9e71b1a35db5db38b44c4e276454e981e396768490e": {
      "address": "0x609fd790D0c1E1b875f4990DD5Ac358EE5CC1a7a",
      "txHash": "0x30c759a457e4def82dc7c3647ef6349752af5cbfca5d31803101446380d80734",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\proxy\\Initializable.sol:25"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\proxy\\Initializable.sol:30"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:31"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)59198_storage)",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\access\\AccessControlUpgradeable.sol:61"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\access\\AccessControlUpgradeable.sol:225"
          },
          {
            "contract": "JunkBridgeProxyContract",
            "label": "junk",
            "type": "t_contract(Junk)45145",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\JunkBridgeProxyContract.sol:13"
          },
          {
            "contract": "JunkBridgeProxyContract",
            "label": "nftStorageAddress",
            "type": "t_address",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\JunkBridgeProxyContract.sol:14"
          },
          {
            "contract": "JunkBridgeProxyContract",
            "label": "enabled",
            "type": "t_bool",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\JunkBridgeProxyContract.sol:15"
          }
        ],
        "types": {
          "t_contract(Junk)45145": {
            "label": "contract Junk"
          },
          "t_address": {
            "label": "address"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)59198_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)59198_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_struct(AddressSet)63001_storage"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_struct(AddressSet)63001_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)62736_storage"
              }
            ]
          },
          "t_struct(Set)62736_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "c1d35b2bc4443892a6afe67eda17da1cb07905f4ac3032466c9a2c3fa6230152": {
      "address": "0x57cB7e08A6EC3A1e0C2dcA30e5E06701c16fCe1f",
      "txHash": "0x0f274b47d27ec0e6798733e1190a7df3fc6b74af3860f808407dd4c7eccec273",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\proxy\\Initializable.sol:25"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\proxy\\Initializable.sol:30"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:31"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)59198_storage)",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\access\\AccessControlUpgradeable.sol:61"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\access\\AccessControlUpgradeable.sol:225"
          },
          {
            "contract": "Launchpad",
            "label": "vars",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\Launchpad.sol:32"
          },
          {
            "contract": "Launchpad",
            "label": "tierStakingRequirement",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\Launchpad.sol:43"
          },
          {
            "contract": "Launchpad",
            "label": "tierAllocationWeight",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\Launchpad.sol:44"
          },
          {
            "contract": "Launchpad",
            "label": "launches",
            "type": "t_mapping(t_uint256,t_struct(Launch)12422_storage)",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\Launchpad.sol:47"
          },
          {
            "contract": "Launchpad",
            "label": "launchTokenPrice",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\Launchpad.sol:48"
          },
          {
            "contract": "Launchpad",
            "label": "launchStartTime",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\Launchpad.sol:49"
          },
          {
            "contract": "Launchpad",
            "label": "launchFundsToRaise",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\Launchpad.sol:50"
          },
          {
            "contract": "Launchpad",
            "label": "launchBaseAllocation",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\Launchpad.sol:51"
          },
          {
            "contract": "Launchpad",
            "label": "launchTotalRaised",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\Launchpad.sol:52"
          },
          {
            "contract": "Launchpad",
            "label": "launchTokenAddress",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\Launchpad.sol:53"
          },
          {
            "contract": "Launchpad",
            "label": "launchEligibleUsersSnapshot",
            "type": "t_mapping(t_uint256,t_struct(AddressSet)65931_storage)",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\Launchpad.sol:56"
          },
          {
            "contract": "Launchpad",
            "label": "launchUserStakedAmountSnapshot",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\Launchpad.sol:57"
          },
          {
            "contract": "Launchpad",
            "label": "launchUserInvestment",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\Launchpad.sol:58"
          },
          {
            "contract": "Launchpad",
            "label": "launchUserUnclaimedSkillCommittedValue",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\Launchpad.sol:59"
          },
          {
            "contract": "Launchpad",
            "label": "launchTotalUnclaimedSkillCommittedValue",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\Launchpad.sol:60"
          },
          {
            "contract": "Launchpad",
            "label": "launchUserTotalUnclaimedSkillCommittedValue",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\Launchpad.sol:61"
          },
          {
            "contract": "Launchpad",
            "label": "launchPeriodicVestingsPercentages",
            "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\Launchpad.sol:64"
          },
          {
            "contract": "Launchpad",
            "label": "launchPeriodicVestingsStartTimestamps",
            "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\Launchpad.sol:65"
          },
          {
            "contract": "Launchpad",
            "label": "launchLinearVestingsDurations",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\Launchpad.sol:66"
          },
          {
            "contract": "Launchpad",
            "label": "launchLinearVestingsStartTimestamps",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\Launchpad.sol:67"
          },
          {
            "contract": "Launchpad",
            "label": "userLinearVestingClaimTimestamp",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\Launchpad.sol:68"
          },
          {
            "contract": "Launchpad",
            "label": "userClaimedVestingPortion",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_uint256,t_bool)))",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\Launchpad.sol:69"
          },
          {
            "contract": "Launchpad",
            "label": "nextLaunchId",
            "type": "t_uint256",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\Launchpad.sol:71"
          },
          {
            "contract": "Launchpad",
            "label": "skillPrice",
            "type": "t_uint256",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\Launchpad.sol:72"
          },
          {
            "contract": "Launchpad",
            "label": "_game",
            "type": "t_contract(CryptoBlades)44564",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\Launchpad.sol:74"
          },
          {
            "contract": "Launchpad",
            "label": "didUserCommitToLaunch",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\Launchpad.sol:76"
          }
        ],
        "types": {
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_uint256,t_struct(Launch)12422_storage)": {
            "label": "mapping(uint256 => struct Launchpad.Launch)"
          },
          "t_struct(Launch)12422_storage": {
            "label": "struct Launchpad.Launch",
            "members": [
              {
                "label": "name",
                "type": "t_string_storage"
              },
              {
                "label": "tokenSymbol",
                "type": "t_string_storage"
              },
              {
                "label": "detailsJsonUri",
                "type": "t_string_storage"
              },
              {
                "label": "imageUrl",
                "type": "t_string_storage"
              },
              {
                "label": "fundingTokenAddress",
                "type": "t_address"
              },
              {
                "label": "phase",
                "type": "t_uint256"
              },
              {
                "label": "commitOnly",
                "type": "t_bool"
              }
            ]
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_address": {
            "label": "address"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)"
          },
          "t_mapping(t_uint256,t_struct(AddressSet)65931_storage)": {
            "label": "mapping(uint256 => struct EnumerableSet.AddressSet)"
          },
          "t_struct(AddressSet)65931_storage": {
            "label": "struct EnumerableSet.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)65666_storage"
              }
            ]
          },
          "t_struct(Set)65666_storage": {
            "label": "struct EnumerableSet.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(uint256 => uint256[])"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(uint256 => mapping(uint256 => uint256))"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(address => mapping(uint256 => uint256))"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_uint256,t_bool)))": {
            "label": "mapping(address => mapping(uint256 => mapping(uint256 => bool)))"
          },
          "t_mapping(t_uint256,t_mapping(t_uint256,t_bool))": {
            "label": "mapping(uint256 => mapping(uint256 => bool))"
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_contract(CryptoBlades)44564": {
            "label": "contract CryptoBlades"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_bool))": {
            "label": "mapping(address => mapping(uint256 => bool))"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)59198_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_struct(RoleData)59198_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_struct(AddressSet)63001_storage"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_struct(AddressSet)63001_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)62736_storage"
              }
            ]
          },
          "t_struct(Set)62736_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "eead7a258a7694c1ebaddd115673e3376f6e25aa18a043f6dd24708c4fc5e209": {
      "address": "0xbE999592a2145a8666aFCdc2f3f591cE0473A71d",
      "txHash": "0xb20c92b85011d0be9155a0a3b17ad949d4a02d22482438a5071a4854dc5d1e17",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\proxy\\Initializable.sol:25"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\proxy\\Initializable.sol:30"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:31"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)59198_storage)",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\access\\AccessControlUpgradeable.sol:61"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\access\\AccessControlUpgradeable.sol:225"
          },
          {
            "contract": "TokensManager",
            "label": "game",
            "type": "t_contract(CryptoBlades)44564",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\TokensManager.sol:14"
          },
          {
            "contract": "TokensManager",
            "label": "combatTokenChargePercent",
            "type": "t_uint256",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\TokensManager.sol:16"
          },
          {
            "contract": "TokensManager",
            "label": "tokenPrice",
            "type": "t_uint256",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\TokensManager.sol:18"
          },
          {
            "contract": "TokensManager",
            "label": "skillTokenPrice",
            "type": "t_uint256",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\TokensManager.sol:19"
          },
          {
            "contract": "TokensManager",
            "label": "offsetSlippage",
            "type": "t_uint8",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\TokensManager.sol:20"
          }
        ],
        "types": {
          "t_contract(CryptoBlades)44564": {
            "label": "contract CryptoBlades"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)59198_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)59198_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_struct(AddressSet)63001_storage"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_struct(AddressSet)63001_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)62736_storage"
              }
            ]
          },
          "t_struct(Set)62736_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_bool": {
            "label": "bool"
          }
        }
      }
    },
    "aa94682caee0a36752eb9d520c4c85fa205ab3982b98d9807e12d1911df3345c": {
      "address": "0x28F581E4750C69c996e3E8A7648B94bC85Dc251B",
      "txHash": "0xc18fbcbf83c72d97405405785b4ef9a0b7007073c9f52f8e20c4d6cfd64a224e",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\proxy\\Initializable.sol:25"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\proxy\\Initializable.sol:30"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:31"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)59198_storage)",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\access\\AccessControlUpgradeable.sol:61"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\access\\AccessControlUpgradeable.sol:225"
          },
          {
            "contract": "ERC20Bridge",
            "label": "_erc20BridgeEnabled",
            "type": "t_bool",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\ERC20Bridge.sol:19"
          },
          {
            "contract": "ERC20Bridge",
            "label": "_bridgeVars",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\ERC20Bridge.sol:26"
          },
          {
            "contract": "ERC20Bridge",
            "label": "_bridgeTokenVars",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\ERC20Bridge.sol:27"
          },
          {
            "contract": "ERC20Bridge",
            "label": "_transfersOutCount",
            "type": "t_uint256",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\ERC20Bridge.sol:58"
          },
          {
            "contract": "ERC20Bridge",
            "label": "_bridgeEnabled",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\ERC20Bridge.sol:59"
          },
          {
            "contract": "ERC20Bridge",
            "label": "_transferOuts",
            "type": "t_mapping(t_uint256,t_struct(ERC20BridgeOutRequests)9913_storage)",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\ERC20Bridge.sol:60"
          },
          {
            "contract": "ERC20Bridge",
            "label": "_transferInsCount",
            "type": "t_uint256",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\ERC20Bridge.sol:62"
          },
          {
            "contract": "ERC20Bridge",
            "label": "_transferIns",
            "type": "t_mapping(t_uint256,t_struct(ERC20BridgeReceivedTokens)9926_storage)",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\ERC20Bridge.sol:63"
          },
          {
            "contract": "ERC20Bridge",
            "label": "_transferOutOfPlayers",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\ERC20Bridge.sol:67"
          },
          {
            "contract": "ERC20Bridge",
            "label": "_transferOutOfPlayersHistory",
            "type": "t_mapping(t_address,t_struct(UintSet)66052_storage)",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\ERC20Bridge.sol:68"
          },
          {
            "contract": "ERC20Bridge",
            "label": "_transferInOfPlayersHistory",
            "type": "t_mapping(t_address,t_struct(UintSet)66052_storage)",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\ERC20Bridge.sol:69"
          },
          {
            "contract": "ERC20Bridge",
            "label": "_supportedTokenTypes",
            "type": "t_struct(AddressSet)65931_storage",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\ERC20Bridge.sol:72"
          },
          {
            "contract": "ERC20Bridge",
            "label": "_supportedChains",
            "type": "t_struct(UintSet)66052_storage",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\ERC20Bridge.sol:73"
          },
          {
            "contract": "ERC20Bridge",
            "label": "game",
            "type": "t_contract(CryptoBlades)44564",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\ERC20Bridge.sol:75"
          },
          {
            "contract": "ERC20Bridge",
            "label": "_erc20ProxyContract",
            "type": "t_mapping(t_address,t_address)",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\ERC20Bridge.sol:78"
          },
          {
            "contract": "ERC20Bridge",
            "label": "_botLog",
            "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\ERC20Bridge.sol:80"
          },
          {
            "contract": "ERC20Bridge",
            "label": "_erc20AllowedChains",
            "type": "t_mapping(t_address,t_struct(UintSet)66052_storage)",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\ERC20Bridge.sol:82"
          },
          {
            "contract": "ERC20Bridge",
            "label": "_targetChainAllowedERC20s",
            "type": "t_mapping(t_uint256,t_struct(AddressSet)65931_storage)",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\ERC20Bridge.sol:84"
          },
          {
            "contract": "ERC20Bridge",
            "label": "_whitelistedWallets",
            "type": "t_mapping(t_address,t_struct(AddressSet)65931_storage)",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\ERC20Bridge.sol:87"
          }
        ],
        "types": {
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(address => mapping(uint256 => uint256))"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_mapping(t_uint256,t_struct(ERC20BridgeOutRequests)9913_storage)": {
            "label": "mapping(uint256 => struct ERC20Bridge.ERC20BridgeOutRequests)"
          },
          "t_struct(ERC20BridgeOutRequests)9913_storage": {
            "label": "struct ERC20Bridge.ERC20BridgeOutRequests",
            "members": [
              {
                "label": "owner",
                "type": "t_address"
              },
              {
                "label": "erc20Address",
                "type": "t_address"
              },
              {
                "label": "amount",
                "type": "t_uint256"
              },
              {
                "label": "chainId",
                "type": "t_uint256"
              },
              {
                "label": "status",
                "type": "t_uint8"
              },
              {
                "label": "blockNumber",
                "type": "t_uint256"
              }
            ]
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_mapping(t_uint256,t_struct(ERC20BridgeReceivedTokens)9926_storage)": {
            "label": "mapping(uint256 => struct ERC20Bridge.ERC20BridgeReceivedTokens)"
          },
          "t_struct(ERC20BridgeReceivedTokens)9926_storage": {
            "label": "struct ERC20Bridge.ERC20BridgeReceivedTokens",
            "members": [
              {
                "label": "owner",
                "type": "t_address"
              },
              {
                "label": "erc20Address",
                "type": "t_address"
              },
              {
                "label": "amount",
                "type": "t_uint256"
              },
              {
                "label": "sourceChain",
                "type": "t_uint256"
              },
              {
                "label": "sourceTransferId",
                "type": "t_uint256"
              },
              {
                "label": "blockNumber",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_struct(UintSet)66052_storage)": {
            "label": "mapping(address => struct EnumerableSet.UintSet)"
          },
          "t_struct(UintSet)66052_storage": {
            "label": "struct EnumerableSet.UintSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)65666_storage"
              }
            ]
          },
          "t_struct(Set)65666_storage": {
            "label": "struct EnumerableSet.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_struct(AddressSet)65931_storage": {
            "label": "struct EnumerableSet.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)65666_storage"
              }
            ]
          },
          "t_contract(CryptoBlades)44564": {
            "label": "contract CryptoBlades"
          },
          "t_mapping(t_address,t_address)": {
            "label": "mapping(address => address)"
          },
          "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(uint256 => mapping(uint256 => uint256))"
          },
          "t_mapping(t_uint256,t_struct(AddressSet)65931_storage)": {
            "label": "mapping(uint256 => struct EnumerableSet.AddressSet)"
          },
          "t_mapping(t_address,t_struct(AddressSet)65931_storage)": {
            "label": "mapping(address => struct EnumerableSet.AddressSet)"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)59198_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_struct(RoleData)59198_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_struct(AddressSet)63001_storage"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_struct(AddressSet)63001_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)62736_storage"
              }
            ]
          },
          "t_struct(Set)62736_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "1cd70dd93678f2a05d4b144c32c83e77d0ba7fcafb64e50f32cce4aa124c8769": {
      "address": "0xaA2270f4098E9A5a972fde573679BdE9A7A6ab2c",
      "txHash": "0x4f4fcf731e04207d79eae4a6e7149c5580ed25a3eb150825779572be4aa05857",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\proxy\\Initializable.sol:25"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\proxy\\Initializable.sol:30"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:31"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)59198_storage)",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\access\\AccessControlUpgradeable.sol:61"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\access\\AccessControlUpgradeable.sol:225"
          },
          {
            "contract": "SkillERC20BridgeProxyContract",
            "label": "promos",
            "type": "t_contract(Promos)21671",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\SkillERC20BridgeProxyContract.sol:13"
          },
          {
            "contract": "SkillERC20BridgeProxyContract",
            "label": "enabled",
            "type": "t_bool",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\SkillERC20BridgeProxyContract.sol:14"
          }
        ],
        "types": {
          "t_contract(Promos)21671": {
            "label": "contract Promos"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)59198_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)59198_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_struct(AddressSet)63001_storage"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_struct(AddressSet)63001_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)62736_storage"
              }
            ]
          },
          "t_struct(Set)62736_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "5a20ade9ce757fca7b0e6090ae68b4ee7d4e5fafac7ee773ec75a3c6a86c4030": {
      "address": "0x013897602e1F220561Da57E8d3b705AA933e7344",
      "txHash": "0xc2acba468e414c9ba42d2f96b69c777551d7fe75be538e3ddd8b599c7bbb9b3a",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\proxy\\Initializable.sol:25"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\proxy\\Initializable.sol:30"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:31"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)59198_storage)",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\access\\AccessControlUpgradeable.sol:61"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\access\\AccessControlUpgradeable.sol:225"
          },
          {
            "contract": "CBKLandBridgeProxyContract",
            "label": "_cbkLand",
            "type": "t_contract(CBKLand)3658",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\CBKLandBridgeProxyContract.sol:13"
          },
          {
            "contract": "CBKLandBridgeProxyContract",
            "label": "_nftStorageAddress",
            "type": "t_address",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\CBKLandBridgeProxyContract.sol:14"
          },
          {
            "contract": "CBKLandBridgeProxyContract",
            "label": "_enabled",
            "type": "t_bool",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\CBKLandBridgeProxyContract.sol:15"
          }
        ],
        "types": {
          "t_contract(CBKLand)3658": {
            "label": "contract CBKLand"
          },
          "t_address": {
            "label": "address"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)59198_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)59198_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_struct(AddressSet)63001_storage"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_struct(AddressSet)63001_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)62736_storage"
              }
            ]
          },
          "t_struct(Set)62736_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "a73eed2a203ede622cd265dd875b09acb9c0f7502ed37e8444c493bc364786f0": {
      "address": "0xe6D98Dc214bB7f0501912DFBe30B1118992F03Ef",
      "txHash": "0xdafa4f436dc6cf4d1a7e7420fdc55588d7cf0aa6934e42acaaff85b1f2600f13",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\proxy\\Initializable.sol:25"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\proxy\\Initializable.sol:30"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\token\\ERC20\\ERC20Upgradeable.sol:37"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_allowances",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\token\\ERC20\\ERC20Upgradeable.sol:39"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_totalSupply",
            "type": "t_uint256",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\token\\ERC20\\ERC20Upgradeable.sol:41"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\token\\ERC20\\ERC20Upgradeable.sol:43"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\token\\ERC20\\ERC20Upgradeable.sol:44"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_decimals",
            "type": "t_uint8",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\token\\ERC20\\ERC20Upgradeable.sol:45"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)44_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\token\\ERC20\\ERC20Upgradeable.sol:312"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:20"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:74"
          }
        ],
        "types": {
          "t_address": {
            "label": "address"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_array(t_uint256)44_storage": {
            "label": "uint256[44]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_bool": {
            "label": "bool"
          }
        }
      }
    },
    "d4a9e31d891b9bc11781baff3e541f4a392cd0c2c8bcbcaba42a8f47241e837f": {
      "address": "0x41210cDEA4448B3651271a42D6d50E7cC3FfA0a7",
      "txHash": "0xb3b2fc7cf4a6d35696f8590e64f166a086a0d303b14e485c04aa1cadea5acd40",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\proxy\\Initializable.sol:25"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\proxy\\Initializable.sol:30"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:31"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)59279_storage)",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\access\\AccessControlUpgradeable.sol:61"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\access\\AccessControlUpgradeable.sol:225"
          },
          {
            "contract": "PvpCore",
            "label": "game",
            "type": "t_contract(CryptoBlades)44645",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\PvpCore.sol:57"
          },
          {
            "contract": "PvpCore",
            "label": "characters",
            "type": "t_contract(Characters)40692",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\PvpCore.sol:58"
          },
          {
            "contract": "PvpCore",
            "label": "weapons",
            "type": "t_contract(Weapons)58832",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\PvpCore.sol:59"
          },
          {
            "contract": "PvpCore",
            "label": "shields",
            "type": "t_contract(Shields)51275",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\PvpCore.sol:60"
          },
          {
            "contract": "PvpCore",
            "label": "skillToken",
            "type": "t_contract(IERC20)65088",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\PvpCore.sol:61"
          },
          {
            "contract": "PvpCore",
            "label": "randoms",
            "type": "t_contract(IRandoms)44753",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\PvpCore.sol:62"
          },
          {
            "contract": "PvpCore",
            "label": "pvprankings",
            "type": "t_contract(PvpRankings)29531",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\PvpCore.sol:63"
          },
          {
            "contract": "PvpCore",
            "label": "_baseWagerUSD",
            "type": "t_int128",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\PvpCore.sol:66"
          },
          {
            "contract": "PvpCore",
            "label": "_tierWagerUSD",
            "type": "t_int128",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\PvpCore.sol:68"
          },
          {
            "contract": "PvpCore",
            "label": "wageringFactor",
            "type": "t_uint8",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\PvpCore.sol:70"
          },
          {
            "contract": "PvpCore",
            "label": "reRollFeePercent",
            "type": "t_uint256",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\PvpCore.sol:72"
          },
          {
            "contract": "PvpCore",
            "label": "withdrawFeePercent",
            "type": "t_uint256",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\PvpCore.sol:74"
          },
          {
            "contract": "PvpCore",
            "label": "decisionSeconds",
            "type": "t_uint256",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\PvpCore.sol:76"
          },
          {
            "contract": "PvpCore",
            "label": "arenaAccess",
            "type": "t_uint256",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\PvpCore.sol:78"
          },
          {
            "contract": "PvpCore",
            "label": "duelOffsetCost",
            "type": "t_uint256",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\PvpCore.sol:80"
          },
          {
            "contract": "PvpCore",
            "label": "pvpBotAddress",
            "type": "t_address_payable",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\PvpCore.sol:82"
          },
          {
            "contract": "PvpCore",
            "label": "_duelQueue",
            "type": "t_struct(UintSet)66133_storage",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\PvpCore.sol:84"
          },
          {
            "contract": "PvpCore",
            "label": "fighterByCharacter",
            "type": "t_mapping(t_uint256,t_struct(Fighter)25435_storage)",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\PvpCore.sol:87"
          },
          {
            "contract": "PvpCore",
            "label": "matchByFinder",
            "type": "t_mapping(t_uint256,t_struct(Match)25442_storage)",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\PvpCore.sol:89"
          },
          {
            "contract": "PvpCore",
            "label": "isCharacterInArena",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\PvpCore.sol:91"
          },
          {
            "contract": "PvpCore",
            "label": "isWeaponInArena",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\PvpCore.sol:93"
          },
          {
            "contract": "PvpCore",
            "label": "isShieldInArena",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\PvpCore.sol:95"
          },
          {
            "contract": "PvpCore",
            "label": "isDefending",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\PvpCore.sol:97"
          },
          {
            "contract": "PvpCore",
            "label": "finderByOpponent",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\PvpCore.sol:99"
          },
          {
            "contract": "PvpCore",
            "label": "previousTierByCharacter",
            "type": "t_mapping(t_uint256,t_uint8)",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\PvpCore.sol:101"
          },
          {
            "contract": "PvpCore",
            "label": "excessWagerByCharacter",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\PvpCore.sol:103"
          },
          {
            "contract": "PvpCore",
            "label": "_matchableCharactersByTier",
            "type": "t_mapping(t_uint8,t_struct(UintSet)66133_storage)",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\PvpCore.sol:105"
          },
          {
            "contract": "PvpCore",
            "label": "specialWeaponRerollTimestamp",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\PvpCore.sol:107"
          },
          {
            "contract": "PvpCore",
            "label": "_ownerByCharacter",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\PvpCore.sol:109"
          }
        ],
        "types": {
          "t_contract(CryptoBlades)44645": {
            "label": "contract CryptoBlades"
          },
          "t_contract(Characters)40692": {
            "label": "contract Characters"
          },
          "t_contract(Weapons)58832": {
            "label": "contract Weapons"
          },
          "t_contract(Shields)51275": {
            "label": "contract Shields"
          },
          "t_contract(IERC20)65088": {
            "label": "contract IERC20"
          },
          "t_contract(IRandoms)44753": {
            "label": "contract IRandoms"
          },
          "t_contract(PvpRankings)29531": {
            "label": "contract PvpRankings"
          },
          "t_int128": {
            "label": "int128"
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_address_payable": {
            "label": "address payable"
          },
          "t_struct(UintSet)66133_storage": {
            "label": "struct EnumerableSet.UintSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)65747_storage"
              }
            ]
          },
          "t_struct(Set)65747_storage": {
            "label": "struct EnumerableSet.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_mapping(t_uint256,t_struct(Fighter)25435_storage)": {
            "label": "mapping(uint256 => struct PvpCore.Fighter)"
          },
          "t_struct(Fighter)25435_storage": {
            "label": "struct PvpCore.Fighter",
            "members": [
              {
                "label": "characterID",
                "type": "t_uint256"
              },
              {
                "label": "weaponID",
                "type": "t_uint256"
              },
              {
                "label": "shieldID",
                "type": "t_uint256"
              },
              {
                "label": "wager",
                "type": "t_uint256"
              },
              {
                "label": "useShield",
                "type": "t_bool"
              }
            ]
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_uint256,t_struct(Match)25442_storage)": {
            "label": "mapping(uint256 => struct PvpCore.Match)"
          },
          "t_struct(Match)25442_storage": {
            "label": "struct PvpCore.Match",
            "members": [
              {
                "label": "attackerID",
                "type": "t_uint256"
              },
              {
                "label": "defenderID",
                "type": "t_uint256"
              },
              {
                "label": "createdAt",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_uint256,t_uint8)": {
            "label": "mapping(uint256 => uint8)"
          },
          "t_mapping(t_uint8,t_struct(UintSet)66133_storage)": {
            "label": "mapping(uint8 => struct EnumerableSet.UintSet)"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)59279_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_struct(RoleData)59279_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_struct(AddressSet)63082_storage"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_struct(AddressSet)63082_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)62817_storage"
              }
            ]
          },
          "t_struct(Set)62817_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "dbcec57128abb13bbdcb9e986e2c6b18b5c7dabb0b4fd04d418387a416a0fac7": {
      "address": "0x8789B6ffdC1eDAdf87a9D95026A51e330367a9e7",
      "txHash": "0x6f1643b3032aba3a1adb045013695b508e1c65341234345bf150018d35de5b10",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\proxy\\Initializable.sol:25"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\proxy\\Initializable.sol:30"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:20"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:74"
          },
          {
            "contract": "RewardsDistributionRecipientUpgradeable",
            "label": "rewardsDistribution",
            "type": "t_address",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\staking\\RewardsDistributionRecipientUpgradeable.sol:9"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\utils\\ReentrancyGuardUpgradeable.sol:37"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\utils\\ReentrancyGuardUpgradeable.sol:67"
          },
          {
            "contract": "FailsafeUpgradeable",
            "label": "failsafeModeActive",
            "type": "t_bool",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\staking\\FailsafeUpgradeable.sol:7"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "_paused",
            "type": "t_bool",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\utils\\PausableUpgradeable.sol:28"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\utils\\PausableUpgradeable.sol:96"
          },
          {
            "contract": "StakingRewardsUpgradeable",
            "label": "rewardsToken",
            "type": "t_contract(IERC20)65088",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\staking\\StakingRewardsUpgradeable.sol:31"
          },
          {
            "contract": "StakingRewardsUpgradeable",
            "label": "stakingToken",
            "type": "t_contract(IERC20)65088",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\staking\\StakingRewardsUpgradeable.sol:32"
          },
          {
            "contract": "StakingRewardsUpgradeable",
            "label": "periodFinish",
            "type": "t_uint256",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\staking\\StakingRewardsUpgradeable.sol:33"
          },
          {
            "contract": "StakingRewardsUpgradeable",
            "label": "rewardRate",
            "type": "t_uint256",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\staking\\StakingRewardsUpgradeable.sol:34"
          },
          {
            "contract": "StakingRewardsUpgradeable",
            "label": "rewardsDuration",
            "type": "t_uint256",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\staking\\StakingRewardsUpgradeable.sol:35"
          },
          {
            "contract": "StakingRewardsUpgradeable",
            "label": "minimumStakeTime",
            "type": "t_uint256",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\staking\\StakingRewardsUpgradeable.sol:36"
          },
          {
            "contract": "StakingRewardsUpgradeable",
            "label": "lastUpdateTime",
            "type": "t_uint256",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\staking\\StakingRewardsUpgradeable.sol:37"
          },
          {
            "contract": "StakingRewardsUpgradeable",
            "label": "rewardPerTokenStored",
            "type": "t_uint256",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\staking\\StakingRewardsUpgradeable.sol:38"
          },
          {
            "contract": "StakingRewardsUpgradeable",
            "label": "userRewardPerTokenPaid",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\staking\\StakingRewardsUpgradeable.sol:40"
          },
          {
            "contract": "StakingRewardsUpgradeable",
            "label": "rewards",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\staking\\StakingRewardsUpgradeable.sol:41"
          },
          {
            "contract": "StakingRewardsUpgradeable",
            "label": "_totalSupply",
            "type": "t_uint256",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\staking\\StakingRewardsUpgradeable.sol:43"
          },
          {
            "contract": "StakingRewardsUpgradeable",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\staking\\StakingRewardsUpgradeable.sol:44"
          },
          {
            "contract": "StakingRewardsUpgradeable",
            "label": "_stakeTimestamp",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\staking\\StakingRewardsUpgradeable.sol:45"
          },
          {
            "contract": "StakingRewardsUpgradeable",
            "label": "__game",
            "type": "t_contract(CryptoBlades)44645",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\staking\\StakingRewardsUpgradeable.sol:48"
          },
          {
            "contract": "StakingRewardsUpgradeable",
            "label": "minimumStakeAmount",
            "type": "t_uint256",
            "src": "..\\..\\..\\..\\..\\..\\C\\Users\\Kacper\\repo\\forked\\cryptoblades\\contracts\\staking\\StakingRewardsUpgradeable.sol:50"
          }
        ],
        "types": {
          "t_contract(IERC20)65088": {
            "label": "contract IERC20"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(CryptoBlades)44645": {
            "label": "contract CryptoBlades"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    }
  }
}
